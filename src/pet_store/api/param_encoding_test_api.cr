#  OpenAPI Petstore
#
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
#
# The version of the OpenAPI document: 1.0.0
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "../models/param_encoding_test2_request_body"
require "../models/tag"

module PetStore
  class ParamEncodingTestApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # test param encoding
    # test param encoding
    # @required @param param_encoding_test2_request_body [PetStore::ParamEncodingTest2RequestBody?] param encoding test request
    # @optional @param array_in_query [Array(String)?] array param in query
    # @optional @param map_in_query [JSON::Any?] map param in query
    # @optional @param tag_in_query [PetStore::Tag?] model tag param in query
    # @return [Nil]
    def test_param_encoding(
      *,
      param_encoding_test2_request_body : PetStore::ParamEncodingTest2RequestBody? = nil,
      array_in_query : Array(String)? = nil,
      map_in_query : JSON::Any? = nil,
      tag_in_query : PetStore::Tag? = nil
    ) : Nil
      test_param_encoding_with_http_info(param_encoding_test2_request_body: param_encoding_test2_request_body, array_in_query: array_in_query, map_in_query: map_in_query, tag_in_query: tag_in_query)
      nil
    end

    # test param encoding
    # test param encoding
    # @required @param param_encoding_test2_request_body [PetStore::ParamEncodingTest2RequestBody?] param encoding test request
    # @optional @param array_in_query [Array(String)?] array param in query
    # @optional @param map_in_query [JSON::Any?] map param in query
    # @optional @param tag_in_query [PetStore::Tag?] model tag param in query
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def test_param_encoding_with_http_info(
      *,
      param_encoding_test2_request_body : PetStore::ParamEncodingTest2RequestBody? = nil,
      array_in_query : Array(String)? = nil,
      map_in_query : JSON::Any? = nil,
      tag_in_query : PetStore::Tag? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_test_param_encoding(param_encoding_test2_request_body: param_encoding_test2_request_body, array_in_query: array_in_query, map_in_query: map_in_query, tag_in_query: tag_in_query)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: ParamEncodingTestApi#test_param_encoding\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # test param encoding
    # test param encoding
    # @required @param param_encoding_test2_request_body [PetStore::ParamEncodingTest2RequestBody?] param encoding test request
    # @optional @param array_in_query [Array(String)?] array param in query
    # @optional @param map_in_query [JSON::Any?] map param in query
    # @optional @param tag_in_query [PetStore::Tag?] model tag param in query
    # @return nil
    def test_param_encoding(
      *,
      param_encoding_test2_request_body : PetStore::ParamEncodingTest2RequestBody? = nil,
      array_in_query : Array(String)? = nil,
      map_in_query : JSON::Any? = nil,
      tag_in_query : PetStore::Tag? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_test_param_encoding(param_encoding_test2_request_body: param_encoding_test2_request_body, array_in_query: array_in_query, map_in_query: map_in_query, tag_in_query: tag_in_query).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_test_param_encoding(
      *,
      param_encoding_test2_request_body : PetStore::ParamEncodingTest2RequestBody? = nil,
      array_in_query : Array(String)? = nil,
      map_in_query : JSON::Any? = nil,
      tag_in_query : PetStore::Tag? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: ParamEncodingTestApi.test_param_encoding ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"param_encoding_test2_request_body\" is required and cannot be null") if param_encoding_test2_request_body.nil?
        unless (_param_encoding_test2_request_body = param_encoding_test2_request_body).nil?
          _param_encoding_test2_request_body.validate if _param_encoding_test2_request_body.is_a?(OpenApi::Validatable)
        end

        unless (_tag_in_query = tag_in_query).nil?
          _tag_in_query.validate if _tag_in_query.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/param_encoding_test"

      # header parameters
      header_params : Hash(String, String) = Hash(String, String).new
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params : Hash(String, String) = Hash(String, String).new

      # query parameters
      query_params : Hash(String, (String | Array(String) | JSON::Any)) = Hash(String, (String | Array(String) | JSON::Any)).new
      query_params["array_in_query"] = @api_client.build_collection_param(array_in_query, "multi") if !array_in_query.nil? && !array_in_query.empty?
      query_params["map_in_query"] = map_in_query.to_s if !map_in_query.nil?
      query_params["tag_in_query"] = tag_in_query.to_s if !tag_in_query.nil?

      # form parameters
      form_params : Array(Tuple(String, Crest::ParamsValue)) | Nil = nil

      # http body (model)
      post_body : IO | String | Nil = @api_client.encode(body: param_encoding_test2_request_body, content_type: header_params["Content-Type"]?) if !param_encoding_test2_request_body.nil?

      # auth_names
      auth_names = [] of String

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "ParamEncodingTestApi.test_param_encoding",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
