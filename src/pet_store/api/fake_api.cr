#  OpenAPI Petstore
#
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
#
# The version of the OpenAPI document: 1.0.0
#
# Generated by: https://openapi-generator.tech
#

require "uri"

module PetStore
  class FakeApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Health check endpoint
    # @return [HealthCheckResult]
    def fake_health_get
      data, _status_code, _headers = fake_health_get_with_http_info()
      data
    end

    # Health check endpoint
    # @return [Array<(HealthCheckResult, Integer, Hash)>] HealthCheckResult data, response status code and response headers
    def fake_health_get_with_http_info
      request = build_api_request_for_fake_health_get()

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: FakeApi#fake_health_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return HealthCheckResult.from_json(data), status_code, headers
    end

    # Health check endpoint
    # @return nil
    def fake_health_get(&block : Crest::Response ->)
      build_api_request_for_fake_health_get().execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_fake_health_get : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: FakeApi.fake_health_get ..." }
      end
      # resource path
      local_var_path = "/fake/health"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = [] of String

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "FakeApi.fake_health_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Test serialization of outer boolean types
    # @optional @param body [Bool?] Input boolean as post body
    # @return [Bool]
    def fake_outer_boolean_serialize(*, body : Bool? = nil)
      data, _status_code, _headers = fake_outer_boolean_serialize_with_http_info(body: body)
      data
    end

    # Test serialization of outer boolean types
    # @optional @param body [Bool?] Input boolean as post body
    # @return [Array<(Bool, Integer, Hash)>] Bool data, response status code and response headers
    def fake_outer_boolean_serialize_with_http_info(*, body : Bool? = nil)
      request = build_api_request_for_fake_outer_boolean_serialize(body: body)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: FakeApi#fake_outer_boolean_serialize\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Bool.from_json(data), status_code, headers
    end

    # Test serialization of outer boolean types
    # @optional @param body [Bool?] Input boolean as post body
    # @return nil
    def fake_outer_boolean_serialize(*, body : Bool? = nil, &block : Crest::Response ->)
      build_api_request_for_fake_outer_boolean_serialize(body: body).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_fake_outer_boolean_serialize(*, body : Bool? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: FakeApi.fake_outer_boolean_serialize ..." }
      end
      # resource path
      local_var_path = "/fake/outer/boolean"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = body.to_json

      # auth_names
      auth_names = [] of String

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "FakeApi.fake_outer_boolean_serialize",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Test serialization of object with outer number type
    # @optional @param outer_composite [OuterComposite?] Input composite as post body
    # @return [OuterComposite]
    def fake_outer_composite_serialize(*, outer_composite : OuterComposite? = nil)
      data, _status_code, _headers = fake_outer_composite_serialize_with_http_info(outer_composite: outer_composite)
      data
    end

    # Test serialization of object with outer number type
    # @optional @param outer_composite [OuterComposite?] Input composite as post body
    # @return [Array<(OuterComposite, Integer, Hash)>] OuterComposite data, response status code and response headers
    def fake_outer_composite_serialize_with_http_info(*, outer_composite : OuterComposite? = nil)
      request = build_api_request_for_fake_outer_composite_serialize(outer_composite: outer_composite)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: FakeApi#fake_outer_composite_serialize\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return OuterComposite.from_json(data), status_code, headers
    end

    # Test serialization of object with outer number type
    # @optional @param outer_composite [OuterComposite?] Input composite as post body
    # @return nil
    def fake_outer_composite_serialize(*, outer_composite : OuterComposite? = nil, &block : Crest::Response ->)
      build_api_request_for_fake_outer_composite_serialize(outer_composite: outer_composite).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_fake_outer_composite_serialize(*, outer_composite : OuterComposite? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: FakeApi.fake_outer_composite_serialize ..." }
      end
      # resource path
      local_var_path = "/fake/outer/composite"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = outer_composite.to_json

      # auth_names
      auth_names = [] of String

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "FakeApi.fake_outer_composite_serialize",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Test serialization of outer number types
    # @optional @param body [Float64?] Input number as post body
    # @return [Float64]
    def fake_outer_number_serialize(*, body : Float64? = nil)
      data, _status_code, _headers = fake_outer_number_serialize_with_http_info(body: body)
      data
    end

    # Test serialization of outer number types
    # @optional @param body [Float64?] Input number as post body
    # @return [Array<(Float64, Integer, Hash)>] Float64 data, response status code and response headers
    def fake_outer_number_serialize_with_http_info(*, body : Float64? = nil)
      request = build_api_request_for_fake_outer_number_serialize(body: body)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: FakeApi#fake_outer_number_serialize\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Float64.from_json(data), status_code, headers
    end

    # Test serialization of outer number types
    # @optional @param body [Float64?] Input number as post body
    # @return nil
    def fake_outer_number_serialize(*, body : Float64? = nil, &block : Crest::Response ->)
      build_api_request_for_fake_outer_number_serialize(body: body).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_fake_outer_number_serialize(*, body : Float64? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: FakeApi.fake_outer_number_serialize ..." }
      end
      # resource path
      local_var_path = "/fake/outer/number"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = body.to_json

      # auth_names
      auth_names = [] of String

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "FakeApi.fake_outer_number_serialize",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Test serialization of outer string types
    # @optional @param body [String?] Input string as post body
    # @return [String]
    def fake_outer_string_serialize(*, body : String? = nil)
      data, _status_code, _headers = fake_outer_string_serialize_with_http_info(body: body)
      data
    end

    # Test serialization of outer string types
    # @optional @param body [String?] Input string as post body
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def fake_outer_string_serialize_with_http_info(*, body : String? = nil)
      request = build_api_request_for_fake_outer_string_serialize(body: body)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: FakeApi#fake_outer_string_serialize\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return String.from_json(data), status_code, headers
    end

    # Test serialization of outer string types
    # @optional @param body [String?] Input string as post body
    # @return nil
    def fake_outer_string_serialize(*, body : String? = nil, &block : Crest::Response ->)
      build_api_request_for_fake_outer_string_serialize(body: body).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_fake_outer_string_serialize(*, body : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: FakeApi.fake_outer_string_serialize ..." }
      end
      # resource path
      local_var_path = "/fake/outer/string"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = body.to_json

      # auth_names
      auth_names = [] of String

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "FakeApi.fake_outer_string_serialize",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # For this test, the body for this request much reference a schema named `File`.
    # @param file_schema_test_class [FileSchemaTestClass]
    # @return [nil]
    def test_body_with_file_schema(*, file_schema_test_class : FileSchemaTestClass)
      test_body_with_file_schema_with_http_info(file_schema_test_class: file_schema_test_class)
      nil
    end

    # For this test, the body for this request much reference a schema named &#x60;File&#x60;.
    # @param file_schema_test_class [FileSchemaTestClass]
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def test_body_with_file_schema_with_http_info(*, file_schema_test_class : FileSchemaTestClass)
      request = build_api_request_for_test_body_with_file_schema(file_schema_test_class: file_schema_test_class)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: FakeApi#test_body_with_file_schema\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return nil, status_code, headers
    end

    # For this test, the body for this request much reference a schema named &#x60;File&#x60;.
    # @param file_schema_test_class [FileSchemaTestClass]
    # @return nil
    def test_body_with_file_schema(*, file_schema_test_class : FileSchemaTestClass, &block : Crest::Response ->)
      build_api_request_for_test_body_with_file_schema(file_schema_test_class: file_schema_test_class).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_test_body_with_file_schema(*, file_schema_test_class : FileSchemaTestClass) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: FakeApi.test_body_with_file_schema ..." }
      end
      # resource path
      local_var_path = "/fake/body-with-file-schema"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = file_schema_test_class.to_json

      # auth_names
      auth_names = [] of String

      @api_client.build_api_request(
        http_method: :"PUT",
        path: local_var_path,
        operation: "FakeApi.test_body_with_file_schema",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # @param query [String]
    # @param user [User]
    # @return [nil]
    def test_body_with_query_params(*, query : String, user : User)
      test_body_with_query_params_with_http_info(query: query, user: user)
      nil
    end

    # @param query [String]
    # @param user [User]
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def test_body_with_query_params_with_http_info(*, query : String, user : User)
      request = build_api_request_for_test_body_with_query_params(query: query, user: user)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: FakeApi#test_body_with_query_params\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return nil, status_code, headers
    end

    # @param query [String]
    # @param user [User]
    # @return nil
    def test_body_with_query_params(*, query : String, user : User, &block : Crest::Response ->)
      build_api_request_for_test_body_with_query_params(query: query, user: user).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_test_body_with_query_params(*, query : String, user : User) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: FakeApi.test_body_with_query_params ..." }
      end
      # resource path
      local_var_path = "/fake/body-with-query-params"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["query"] = query.to_s if !query.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = user.to_json

      # auth_names
      auth_names = [] of String

      @api_client.build_api_request(
        http_method: :"PUT",
        path: local_var_path,
        operation: "FakeApi.test_body_with_query_params",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # To test \"client\" model
    # To test \"client\" model
    # @param client [Client] client model
    # @return [Client]
    def test_client_model(*, client : Client)
      data, _status_code, _headers = test_client_model_with_http_info(client: client)
      data
    end

    # To test \&quot;client\&quot; model
    # To test \&quot;client\&quot; model
    # @param client [Client] client model
    # @return [Array<(Client, Integer, Hash)>] Client data, response status code and response headers
    def test_client_model_with_http_info(*, client : Client)
      request = build_api_request_for_test_client_model(client: client)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: FakeApi#test_client_model\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Client.from_json(data), status_code, headers
    end

    # To test \&quot;client\&quot; model
    # To test \&quot;client\&quot; model
    # @param client [Client] client model
    # @return nil
    def test_client_model(*, client : Client, &block : Crest::Response ->)
      build_api_request_for_test_client_model(client: client).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_test_client_model(*, client : Client) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: FakeApi.test_client_model ..." }
      end
      # resource path
      local_var_path = "/fake"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = client.to_json

      # auth_names
      auth_names = [] of String

      @api_client.build_api_request(
        http_method: :"PATCH",
        path: local_var_path,
        operation: "FakeApi.test_client_model",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트
    # Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트
    # @param number [Float64] None
    # @param double [Float64] None
    # @param pattern_without_delimiter [String] None
    # @param byte [String] None
    # @optional @param integer [Int32?] None
    # @optional @param int32 [Int32?] None
    # @optional @param int64 [Int64?] None
    # @optional @param float [Float32?] None
    # @optional @param string [String?] None
    # @optional @param binary [::File?] None
    # @optional @param date [Time?] None
    # @optional @param date_time [Time?] None
    # @optional @param password [String?] None
    # @optional @param callback [String?] None
    # @return [nil]
    def test_endpoint_parameters(*, number : Float64, double : Float64, pattern_without_delimiter : String, byte : String, integer : Int32? = nil, int32 : Int32? = nil, int64 : Int64? = nil, float : Float32? = nil, string : String? = nil, binary : ::File? = nil, date : Time? = nil, date_time : Time? = nil, password : String? = nil, callback : String? = nil)
      test_endpoint_parameters_with_http_info(number: number, double: double, pattern_without_delimiter: pattern_without_delimiter, byte: byte, integer: integer, int32: int32, int64: int64, float: float, string: string, binary: binary, date: date, date_time: date_time, password: password, callback: callback)
      nil
    end

    # Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트
    # Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트
    # @param number [Float64] None
    # @param double [Float64] None
    # @param pattern_without_delimiter [String] None
    # @param byte [String] None
    # @optional @param integer [Int32?] None
    # @optional @param int32 [Int32?] None
    # @optional @param int64 [Int64?] None
    # @optional @param float [Float32?] None
    # @optional @param string [String?] None
    # @optional @param binary [::File?] None
    # @optional @param date [Time?] None
    # @optional @param date_time [Time?] None
    # @optional @param password [String?] None
    # @optional @param callback [String?] None
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def test_endpoint_parameters_with_http_info(*, number : Float64, double : Float64, pattern_without_delimiter : String, byte : String, integer : Int32? = nil, int32 : Int32? = nil, int64 : Int64? = nil, float : Float32? = nil, string : String? = nil, binary : ::File? = nil, date : Time? = nil, date_time : Time? = nil, password : String? = nil, callback : String? = nil)
      request = build_api_request_for_test_endpoint_parameters(number: number, double: double, pattern_without_delimiter: pattern_without_delimiter, byte: byte, integer: integer, int32: int32, int64: int64, float: float, string: string, binary: binary, date: date, date_time: date_time, password: password, callback: callback)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: FakeApi#test_endpoint_parameters\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return nil, status_code, headers
    end

    # Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트
    # Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트
    # @param number [Float64] None
    # @param double [Float64] None
    # @param pattern_without_delimiter [String] None
    # @param byte [String] None
    # @optional @param integer [Int32?] None
    # @optional @param int32 [Int32?] None
    # @optional @param int64 [Int64?] None
    # @optional @param float [Float32?] None
    # @optional @param string [String?] None
    # @optional @param binary [::File?] None
    # @optional @param date [Time?] None
    # @optional @param date_time [Time?] None
    # @optional @param password [String?] None
    # @optional @param callback [String?] None
    # @return nil
    def test_endpoint_parameters(*, number : Float64, double : Float64, pattern_without_delimiter : String, byte : String, integer : Int32? = nil, int32 : Int32? = nil, int64 : Int64? = nil, float : Float32? = nil, string : String? = nil, binary : ::File? = nil, date : Time? = nil, date_time : Time? = nil, password : String? = nil, callback : String? = nil, &block : Crest::Response ->)
      build_api_request_for_test_endpoint_parameters(number: number, double: double, pattern_without_delimiter: pattern_without_delimiter, byte: byte, integer: integer, int32: int32, int64: int64, float: float, string: string, binary: binary, date: date, date_time: date_time, password: password, callback: callback).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_test_endpoint_parameters(*, number : Float64, double : Float64, pattern_without_delimiter : String, byte : String, integer : Int32? = nil, int32 : Int32? = nil, int64 : Int64? = nil, float : Float32? = nil, string : String? = nil, binary : ::File? = nil, date : Time? = nil, date_time : Time? = nil, password : String? = nil, callback : String? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: FakeApi.test_endpoint_parameters ..." }
      end
      if @api_client.config.client_side_validation && number > 543.2
        raise ArgumentError.new("invalid value for \"number\" when calling FakeApi.test_endpoint_parameters, must be smaller than or equal to 543.2.")
      end

      if @api_client.config.client_side_validation && number < 32.1
        raise ArgumentError.new("invalid value for \"number\" when calling FakeApi.test_endpoint_parameters, must be greater than or equal to 32.1.")
      end

      if @api_client.config.client_side_validation && double > 123.4
        raise ArgumentError.new("invalid value for \"double\" when calling FakeApi.test_endpoint_parameters, must be smaller than or equal to 123.4.")
      end

      if @api_client.config.client_side_validation && double < 67.8
        raise ArgumentError.new("invalid value for \"double\" when calling FakeApi.test_endpoint_parameters, must be greater than or equal to 67.8.")
      end

      pattern = /^[A-Z].*/
      if @api_client.config.client_side_validation && pattern_without_delimiter !~ pattern
        raise ArgumentError.new("invalid value for \"pattern_without_delimiter\" when calling FakeApi.test_endpoint_parameters, must conform to the pattern #{pattern}.")
      end

      if @api_client.config.client_side_validation && !integer.nil? && integer > 100
        raise ArgumentError.new("invalid value for \"integer\" when calling FakeApi.test_endpoint_parameters, must be smaller than or equal to 100.")
      end

      if @api_client.config.client_side_validation && !integer.nil? && integer < 10
        raise ArgumentError.new("invalid value for \"integer\" when calling FakeApi.test_endpoint_parameters, must be greater than or equal to 10.")
      end

      if @api_client.config.client_side_validation && !int32.nil? && int32 > 200
        raise ArgumentError.new("invalid value for \"int32\" when calling FakeApi.test_endpoint_parameters, must be smaller than or equal to 200.")
      end

      if @api_client.config.client_side_validation && !int32.nil? && int32 < 20
        raise ArgumentError.new("invalid value for \"int32\" when calling FakeApi.test_endpoint_parameters, must be greater than or equal to 20.")
      end

      if @api_client.config.client_side_validation && !float.nil? && float > 987.6
        raise ArgumentError.new("invalid value for \"float\" when calling FakeApi.test_endpoint_parameters, must be smaller than or equal to 987.6.")
      end

      pattern = /[a-z]/i
      if @api_client.config.client_side_validation && !string.nil? && string !~ pattern
        raise ArgumentError.new("invalid value for \"string\" when calling FakeApi.test_endpoint_parameters, must conform to the pattern #{pattern}.")
      end

      if @api_client.config.client_side_validation && !password.nil? && password.to_s.size > 64
        raise ArgumentError.new("invalid value for \"password\" when calling FakeApi.test_endpoint_parameters, the character length must be smaller than or equal to 64.")
      end

      if @api_client.config.client_side_validation && !password.nil? && password.to_s.size < 10
        raise ArgumentError.new("invalid value for \"password\" when calling FakeApi.test_endpoint_parameters, the character length must be great than or equal to 10.")
      end

      # resource path
      local_var_path = "/fake"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["integer"] = integer.to_s if !integer.nil?
      form_params["int32"] = int32.to_s if !int32.nil?
      form_params["int64"] = int64.to_s if !int64.nil?
      form_params["number"] = number.to_s if !number.nil?
      form_params["float"] = float.to_s if !float.nil?
      form_params["double"] = double.to_s if !double.nil?
      form_params["string"] = string.to_s if !string.nil?
      form_params["pattern_without_delimiter"] = pattern_without_delimiter.to_s if !pattern_without_delimiter.nil?
      form_params["byte"] = byte.to_s if !byte.nil?
      form_params["binary"] = binary if !binary.nil?
      form_params["date"] = Time::Format::ISO_8601_DATE.format(date) if !date.nil?
      form_params["dateTime"] = Time::Format::RFC_3339.format(date_time) if !date_time.nil?
      form_params["password"] = password.to_s if !password.nil?
      form_params["callback"] = callback.to_s if !callback.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["http_basic_test"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "FakeApi.test_endpoint_parameters",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # To test enum parameters
    # To test enum parameters
    # @optional @param enum_header_string_array [Array(String)?] Header parameter enum test (string array)
    # @optional @param enum_header_string [String?] Header parameter enum test (string)
    # @optional @param enum_query_string_array [Array(String)?] Query parameter enum test (string array)
    # @optional @param enum_query_string [String?] Query parameter enum test (string)
    # @optional @param enum_query_integer [Int32?] Query parameter enum test (double)
    # @optional @param enum_query_double [Float64?] Query parameter enum test (double)
    # @optional @param enum_form_string_array [Array(String)?] Form parameter enum test (string array)
    # @optional @param enum_form_string [String?] Form parameter enum test (string)
    # @return [nil]
    def test_enum_parameters(*, enum_header_string_array : Array(String)? = nil, enum_header_string : String? = "-efg", enum_query_string_array : Array(String)? = nil, enum_query_string : String? = "-efg", enum_query_integer : Int32? = nil, enum_query_double : Float64? = nil, enum_form_string_array : Array(String)? = "$", enum_form_string : String? = "-efg")
      test_enum_parameters_with_http_info(enum_header_string_array: enum_header_string_array, enum_header_string: enum_header_string, enum_query_string_array: enum_query_string_array, enum_query_string: enum_query_string, enum_query_integer: enum_query_integer, enum_query_double: enum_query_double, enum_form_string_array: enum_form_string_array, enum_form_string: enum_form_string)
      nil
    end

    # To test enum parameters
    # To test enum parameters
    # @optional @param enum_header_string_array [Array(String)?] Header parameter enum test (string array)
    # @optional @param enum_header_string [String?] Header parameter enum test (string)
    # @optional @param enum_query_string_array [Array(String)?] Query parameter enum test (string array)
    # @optional @param enum_query_string [String?] Query parameter enum test (string)
    # @optional @param enum_query_integer [Int32?] Query parameter enum test (double)
    # @optional @param enum_query_double [Float64?] Query parameter enum test (double)
    # @optional @param enum_form_string_array [Array(String)?] Form parameter enum test (string array)
    # @optional @param enum_form_string [String?] Form parameter enum test (string)
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def test_enum_parameters_with_http_info(*, enum_header_string_array : Array(String)? = nil, enum_header_string : String? = "-efg", enum_query_string_array : Array(String)? = nil, enum_query_string : String? = "-efg", enum_query_integer : Int32? = nil, enum_query_double : Float64? = nil, enum_form_string_array : Array(String)? = "$", enum_form_string : String? = "-efg")
      request = build_api_request_for_test_enum_parameters(enum_header_string_array: enum_header_string_array, enum_header_string: enum_header_string, enum_query_string_array: enum_query_string_array, enum_query_string: enum_query_string, enum_query_integer: enum_query_integer, enum_query_double: enum_query_double, enum_form_string_array: enum_form_string_array, enum_form_string: enum_form_string)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: FakeApi#test_enum_parameters\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return nil, status_code, headers
    end

    # To test enum parameters
    # To test enum parameters
    # @optional @param enum_header_string_array [Array(String)?] Header parameter enum test (string array)
    # @optional @param enum_header_string [String?] Header parameter enum test (string)
    # @optional @param enum_query_string_array [Array(String)?] Query parameter enum test (string array)
    # @optional @param enum_query_string [String?] Query parameter enum test (string)
    # @optional @param enum_query_integer [Int32?] Query parameter enum test (double)
    # @optional @param enum_query_double [Float64?] Query parameter enum test (double)
    # @optional @param enum_form_string_array [Array(String)?] Form parameter enum test (string array)
    # @optional @param enum_form_string [String?] Form parameter enum test (string)
    # @return nil
    def test_enum_parameters(*, enum_header_string_array : Array(String)? = nil, enum_header_string : String? = "-efg", enum_query_string_array : Array(String)? = nil, enum_query_string : String? = "-efg", enum_query_integer : Int32? = nil, enum_query_double : Float64? = nil, enum_form_string_array : Array(String)? = "$", enum_form_string : String? = "-efg", &block : Crest::Response ->)
      build_api_request_for_test_enum_parameters(enum_header_string_array: enum_header_string_array, enum_header_string: enum_header_string, enum_query_string_array: enum_query_string_array, enum_query_string: enum_query_string, enum_query_integer: enum_query_integer, enum_query_double: enum_query_double, enum_form_string_array: enum_form_string_array, enum_form_string: enum_form_string).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_test_enum_parameters(*, enum_header_string_array : Array(String)? = nil, enum_header_string : String? = "-efg", enum_query_string_array : Array(String)? = nil, enum_query_string : String? = "-efg", enum_query_integer : Int32? = nil, enum_query_double : Float64? = nil, enum_form_string_array : Array(String)? = "$", enum_form_string : String? = "-efg") : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: FakeApi.test_enum_parameters ..." }
      end
      allowable_values = [">", "$"]
      if @api_client.config.client_side_validation && !enum_header_string_array.nil? && !enum_header_string_array.all? { |item| allowable_values.includes?(item) }
        raise ArgumentError.new("invalid value for \"enum_header_string_array\", must include one of #{allowable_values}")
      end
      allowable_values = ["_abc", "-efg", "(xyz)"]
      if @api_client.config.client_side_validation && !enum_header_string.nil? && !allowable_values.includes?(enum_header_string)
        raise ArgumentError.new("invalid value for \"enum_header_string\", must be one of #{allowable_values}")
      end
      allowable_values = [">", "$"]
      if @api_client.config.client_side_validation && !enum_query_string_array.nil? && !enum_query_string_array.all? { |item| allowable_values.includes?(item) }
        raise ArgumentError.new("invalid value for \"enum_query_string_array\", must include one of #{allowable_values}")
      end
      allowable_values = ["_abc", "-efg", "(xyz)"]
      if @api_client.config.client_side_validation && !enum_query_string.nil? && !allowable_values.includes?(enum_query_string)
        raise ArgumentError.new("invalid value for \"enum_query_string\", must be one of #{allowable_values}")
      end
      allowable_values = ["1", "-2"]
      if @api_client.config.client_side_validation && !enum_query_integer.nil? && !allowable_values.includes?(enum_query_integer)
        raise ArgumentError.new("invalid value for \"enum_query_integer\", must be one of #{allowable_values}")
      end
      allowable_values = ["1.1", "-1.2"]
      if @api_client.config.client_side_validation && !enum_query_double.nil? && !allowable_values.includes?(enum_query_double)
        raise ArgumentError.new("invalid value for \"enum_query_double\", must be one of #{allowable_values}")
      end
      allowable_values = [">", "$"]
      if @api_client.config.client_side_validation && !enum_form_string_array.nil? && !enum_form_string_array.all? { |item| allowable_values.includes?(item) }
        raise ArgumentError.new("invalid value for \"enum_form_string_array\", must include one of #{allowable_values}")
      end
      allowable_values = ["_abc", "-efg", "(xyz)"]
      if @api_client.config.client_side_validation && !enum_form_string.nil? && !allowable_values.includes?(enum_form_string)
        raise ArgumentError.new("invalid value for \"enum_form_string\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/fake"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["enum_query_string_array"] = @api_client.build_collection_param(enum_query_string_array, "multi") if !enum_query_string_array.nil? && !enum_query_string_array.empty?
      query_params["enum_query_string"] = enum_query_string.to_s if !enum_query_string.nil?
      query_params["enum_query_integer"] = enum_query_integer.to_s if !enum_query_integer.nil?
      query_params["enum_query_double"] = enum_query_double.to_s if !enum_query_double.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])
      header_params["enum_header_string_array"] = @api_client.build_collection_param(enum_header_string_array, "csv") if !enum_header_string_array.nil? && !enum_header_string_array.empty?
      header_params["enum_header_string"] = enum_header_string.to_s if !enum_header_string.nil?

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["enum_form_string_array"] = @api_client.build_collection_param(enum_form_string_array, "csv") if !enum_form_string_array.nil? && !enum_form_string_array.empty?
      form_params["enum_form_string"] = enum_form_string.to_s if !enum_form_string.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = [] of String

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "FakeApi.test_enum_parameters",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fake endpoint to test group parameters (optional)
    # Fake endpoint to test group parameters (optional)
    # @param required_string_group [Int32] Required String in group parameters
    # @param required_boolean_group [Bool] Required Boolean in group parameters
    # @param required_int64_group [Int64] Required Integer in group parameters
    # @optional @param string_group [Int32?] String in group parameters
    # @optional @param boolean_group [Bool?] Boolean in group parameters
    # @optional @param int64_group [Int64?] Integer in group parameters
    # @return [nil]
    def test_group_parameters(*, required_string_group : Int32, required_boolean_group : Bool, required_int64_group : Int64, string_group : Int32? = nil, boolean_group : Bool? = nil, int64_group : Int64? = nil)
      test_group_parameters_with_http_info(required_string_group: required_string_group, required_boolean_group: required_boolean_group, required_int64_group: required_int64_group, string_group: string_group, boolean_group: boolean_group, int64_group: int64_group)
      nil
    end

    # Fake endpoint to test group parameters (optional)
    # Fake endpoint to test group parameters (optional)
    # @param required_string_group [Int32] Required String in group parameters
    # @param required_boolean_group [Bool] Required Boolean in group parameters
    # @param required_int64_group [Int64] Required Integer in group parameters
    # @optional @param string_group [Int32?] String in group parameters
    # @optional @param boolean_group [Bool?] Boolean in group parameters
    # @optional @param int64_group [Int64?] Integer in group parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def test_group_parameters_with_http_info(*, required_string_group : Int32, required_boolean_group : Bool, required_int64_group : Int64, string_group : Int32? = nil, boolean_group : Bool? = nil, int64_group : Int64? = nil)
      request = build_api_request_for_test_group_parameters(required_string_group: required_string_group, required_boolean_group: required_boolean_group, required_int64_group: required_int64_group, string_group: string_group, boolean_group: boolean_group, int64_group: int64_group)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: FakeApi#test_group_parameters\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return nil, status_code, headers
    end

    # Fake endpoint to test group parameters (optional)
    # Fake endpoint to test group parameters (optional)
    # @param required_string_group [Int32] Required String in group parameters
    # @param required_boolean_group [Bool] Required Boolean in group parameters
    # @param required_int64_group [Int64] Required Integer in group parameters
    # @optional @param string_group [Int32?] String in group parameters
    # @optional @param boolean_group [Bool?] Boolean in group parameters
    # @optional @param int64_group [Int64?] Integer in group parameters
    # @return nil
    def test_group_parameters(*, required_string_group : Int32, required_boolean_group : Bool, required_int64_group : Int64, string_group : Int32? = nil, boolean_group : Bool? = nil, int64_group : Int64? = nil, &block : Crest::Response ->)
      build_api_request_for_test_group_parameters(required_string_group: required_string_group, required_boolean_group: required_boolean_group, required_int64_group: required_int64_group, string_group: string_group, boolean_group: boolean_group, int64_group: int64_group).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_test_group_parameters(*, required_string_group : Int32, required_boolean_group : Bool, required_int64_group : Int64, string_group : Int32? = nil, boolean_group : Bool? = nil, int64_group : Int64? = nil) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: FakeApi.test_group_parameters ..." }
      end
      # resource path
      local_var_path = "/fake"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["required_string_group"] = required_string_group.to_s if !required_string_group.nil?
      query_params["required_int64_group"] = required_int64_group.to_s if !required_int64_group.nil?
      query_params["string_group"] = string_group.to_s if !string_group.nil?
      query_params["int64_group"] = int64_group.to_s if !int64_group.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["required_boolean_group"] = required_boolean_group.to_s if !required_boolean_group.nil?
      header_params["boolean_group"] = boolean_group.to_s if !boolean_group.nil?

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["bearer_test"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "FakeApi.test_group_parameters",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # test inline additionalProperties
    #
    # @param request_body [Hash(String, String)] request body
    # @return [nil]
    def test_inline_additional_properties(*, request_body : Hash(String, String))
      test_inline_additional_properties_with_http_info(request_body: request_body)
      nil
    end

    # test inline additionalProperties
    #
    # @param request_body [Hash(String, String)] request body
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def test_inline_additional_properties_with_http_info(*, request_body : Hash(String, String))
      request = build_api_request_for_test_inline_additional_properties(request_body: request_body)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: FakeApi#test_inline_additional_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return nil, status_code, headers
    end

    # test inline additionalProperties
    #
    # @param request_body [Hash(String, String)] request body
    # @return nil
    def test_inline_additional_properties(*, request_body : Hash(String, String), &block : Crest::Response ->)
      build_api_request_for_test_inline_additional_properties(request_body: request_body).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_test_inline_additional_properties(*, request_body : Hash(String, String)) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: FakeApi.test_inline_additional_properties ..." }
      end
      # resource path
      local_var_path = "/fake/inline-additionalProperties"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = nil

      # http body (model)
      post_body = request_body.to_json

      # auth_names
      auth_names = [] of String

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "FakeApi.test_inline_additional_properties",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # test json serialization of form data
    #
    # @param param [String] field1
    # @param param2 [String] field2
    # @return [nil]
    def test_json_form_data(*, param : String, param2 : String)
      test_json_form_data_with_http_info(param: param, param2: param2)
      nil
    end

    # test json serialization of form data
    #
    # @param param [String] field1
    # @param param2 [String] field2
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def test_json_form_data_with_http_info(*, param : String, param2 : String)
      request = build_api_request_for_test_json_form_data(param: param, param2: param2)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: FakeApi#test_json_form_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return nil, status_code, headers
    end

    # test json serialization of form data
    #
    # @param param [String] field1
    # @param param2 [String] field2
    # @return nil
    def test_json_form_data(*, param : String, param2 : String, &block : Crest::Response ->)
      build_api_request_for_test_json_form_data(param: param, param2: param2).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_test_json_form_data(*, param : String, param2 : String) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: FakeApi.test_json_form_data ..." }
      end
      # resource path
      local_var_path = "/fake/jsonFormData"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["param"] = param.to_s if !param.nil?
      form_params["param2"] = param2.to_s if !param2.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = [] of String

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "FakeApi.test_json_form_data",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # To test the collection format in query parameters
    # @param pipe [Array(String)]
    # @param ioutil [Array(String)]
    # @param http [Array(String)]
    # @param url [Array(String)]
    # @param context [Array(String)]
    # @return [nil]
    def test_query_parameter_collection_format(*, pipe : Array(String), ioutil : Array(String), http : Array(String), url : Array(String), context : Array(String))
      test_query_parameter_collection_format_with_http_info(pipe: pipe, ioutil: ioutil, http: http, url: url, context: context)
      nil
    end

    # To test the collection format in query parameters
    # @param pipe [Array(String)]
    # @param ioutil [Array(String)]
    # @param http [Array(String)]
    # @param url [Array(String)]
    # @param context [Array(String)]
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def test_query_parameter_collection_format_with_http_info(*, pipe : Array(String), ioutil : Array(String), http : Array(String), url : Array(String), context : Array(String))
      request = build_api_request_for_test_query_parameter_collection_format(pipe: pipe, ioutil: ioutil, http: http, url: url, context: context)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: FakeApi#test_query_parameter_collection_format\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return nil, status_code, headers
    end

    # To test the collection format in query parameters
    # @param pipe [Array(String)]
    # @param ioutil [Array(String)]
    # @param http [Array(String)]
    # @param url [Array(String)]
    # @param context [Array(String)]
    # @return nil
    def test_query_parameter_collection_format(*, pipe : Array(String), ioutil : Array(String), http : Array(String), url : Array(String), context : Array(String), &block : Crest::Response ->)
      build_api_request_for_test_query_parameter_collection_format(pipe: pipe, ioutil: ioutil, http: http, url: url, context: context).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_test_query_parameter_collection_format(*, pipe : Array(String), ioutil : Array(String), http : Array(String), url : Array(String), context : Array(String)) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: FakeApi.test_query_parameter_collection_format ..." }
      end
      # resource path
      local_var_path = "/fake/test-query-parameters"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["pipe"] = @api_client.build_collection_param(pipe, "multi") if !pipe.nil? && !pipe.empty?
      query_params["ioutil"] = @api_client.build_collection_param(ioutil, "csv") if !ioutil.nil? && !ioutil.empty?
      query_params["http"] = @api_client.build_collection_param(http, "ssv") if !http.nil? && !http.empty?
      query_params["url"] = @api_client.build_collection_param(url, "csv") if !url.nil? && !url.empty?
      query_params["context"] = @api_client.build_collection_param(context, "multi") if !context.nil? && !context.empty?

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = [] of String

      @api_client.build_api_request(
        http_method: :"PUT",
        path: local_var_path,
        operation: "FakeApi.test_query_parameter_collection_format",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # To test unique items in header and query parameters
    # @param query_unique [Set(String)]
    # @param header_unique [Set(String)]
    # @return [Set(Pet)]
    def test_unique_items_header_and_query_parameter_collection_format(*, query_unique : Set(String), header_unique : Set(String))
      data, _status_code, _headers = test_unique_items_header_and_query_parameter_collection_format_with_http_info(query_unique: query_unique, header_unique: header_unique)
      data
    end

    # To test unique items in header and query parameters
    # @param query_unique [Set(String)]
    # @param header_unique [Set(String)]
    # @return [Array<(Set(Pet), Integer, Hash)>] Set(Pet) data, response status code and response headers
    def test_unique_items_header_and_query_parameter_collection_format_with_http_info(*, query_unique : Set(String), header_unique : Set(String))
      request = build_api_request_for_test_unique_items_header_and_query_parameter_collection_format(query_unique: query_unique, header_unique: header_unique)

      data, status_code, headers = @api_client.execute_api_request(request)

      if @api_client.config.debugging
        Log.debug { "API called: FakeApi#test_unique_items_header_and_query_parameter_collection_format\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      return Set(Pet).from_json(data), status_code, headers
    end

    # To test unique items in header and query parameters
    # @param query_unique [Set(String)]
    # @param header_unique [Set(String)]
    # @return nil
    def test_unique_items_header_and_query_parameter_collection_format(*, query_unique : Set(String), header_unique : Set(String), &block : Crest::Response ->)
      build_api_request_for_test_unique_items_header_and_query_parameter_collection_format(query_unique: query_unique, header_unique: header_unique).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_test_unique_items_header_and_query_parameter_collection_format(*, query_unique : Set(String), header_unique : Set(String)) : Crest::Request
      if @api_client.config.debugging
        Log.debug { "Calling API: FakeApi.test_unique_items_header_and_query_parameter_collection_format ..." }
      end
      # resource path
      local_var_path = "/fake/test-unique-parameters"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["queryUnique"] = @api_client.build_collection_param(query_unique, "multi") if !query_unique.nil? && !query_unique.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params["headerUnique"] = @api_client.build_collection_param(header_unique, "csv") if !header_unique.nil? && !header_unique.empty?

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = [] of String

      @api_client.build_api_request(
        http_method: :"PUT",
        path: local_var_path,
        operation: "FakeApi.test_unique_items_header_and_query_parameter_collection_format",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
