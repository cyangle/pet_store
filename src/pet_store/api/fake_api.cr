#  OpenAPI Petstore
#
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
#
# The version of the OpenAPI document: 1.0.0
#
# Generated by: https://openapi-generator.tech
#

require "uri"
require "../api_client"

module PetStore
  class FakeApi
    property api_client : ApiClient

    delegate client_side_validation, debugging, to: @api_client.config

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Health check endpoint
    # @return [PetStore::HealthCheckResult]
    def fake_health_get : PetStore::HealthCheckResult
      data, _status_code, _headers = fake_health_get_with_http_info()
      data
    end

    # Health check endpoint
    # @return [Tuple(PetStore::HealthCheckResult, Integer, Hash)] PetStore::HealthCheckResult, response status code and response headers
    def fake_health_get_with_http_info : Tuple(PetStore::HealthCheckResult, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fake_health_get()

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: FakeApi#fake_health_get\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(PetStore::HealthCheckResult.from_json(body), status_code, headers)
    end

    # Health check endpoint
    # @return nil
    def fake_health_get(
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fake_health_get().execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_fake_health_get : Crest::Request
      if debugging
        Log.debug { "Calling API: FakeApi.fake_health_get ..." }
      end

      # resource path
      local_var_path = "/fake/health"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = [] of String

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "FakeApi.fake_health_get",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Test serialization of outer boolean types
    # @optional @param body [Bool?] Input boolean as post body
    # @return [Bool]
    def fake_outer_boolean_serialize(
      *,
      body : Bool? = nil
    ) : Bool
      data, _status_code, _headers = fake_outer_boolean_serialize_with_http_info(body: body)
      data
    end

    # Test serialization of outer boolean types
    # @optional @param body [Bool?] Input boolean as post body
    # @return [Tuple(Bool, Integer, Hash)] Bool, response status code and response headers
    def fake_outer_boolean_serialize_with_http_info(
      *,
      body : Bool? = nil
    ) : Tuple(Bool, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fake_outer_boolean_serialize(body: body)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: FakeApi#fake_outer_boolean_serialize\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Bool.from_json(body), status_code, headers)
    end

    # Test serialization of outer boolean types
    # @optional @param body [Bool?] Input boolean as post body
    # @return nil
    def fake_outer_boolean_serialize(
      *,
      body : Bool? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fake_outer_boolean_serialize(body: body).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_fake_outer_boolean_serialize(
      *,
      body : Bool? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: FakeApi.fake_outer_boolean_serialize ..." }
      end

      # resource path
      local_var_path = "/fake/outer/boolean"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = body.to_json

      # auth_names
      auth_names = [] of String

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "FakeApi.fake_outer_boolean_serialize",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Test serialization of object with outer number type
    # @optional @param outer_composite [PetStore::OuterComposite?] Input composite as post body
    # @return [PetStore::OuterComposite]
    def fake_outer_composite_serialize(
      *,
      outer_composite : PetStore::OuterComposite? = nil
    ) : PetStore::OuterComposite
      data, _status_code, _headers = fake_outer_composite_serialize_with_http_info(outer_composite: outer_composite)
      data
    end

    # Test serialization of object with outer number type
    # @optional @param outer_composite [PetStore::OuterComposite?] Input composite as post body
    # @return [Tuple(PetStore::OuterComposite, Integer, Hash)] PetStore::OuterComposite, response status code and response headers
    def fake_outer_composite_serialize_with_http_info(
      *,
      outer_composite : PetStore::OuterComposite? = nil
    ) : Tuple(PetStore::OuterComposite, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fake_outer_composite_serialize(outer_composite: outer_composite)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: FakeApi#fake_outer_composite_serialize\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(PetStore::OuterComposite.from_json(body), status_code, headers)
    end

    # Test serialization of object with outer number type
    # @optional @param outer_composite [PetStore::OuterComposite?] Input composite as post body
    # @return nil
    def fake_outer_composite_serialize(
      *,
      outer_composite : PetStore::OuterComposite? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fake_outer_composite_serialize(outer_composite: outer_composite).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_fake_outer_composite_serialize(
      *,
      outer_composite : PetStore::OuterComposite? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: FakeApi.fake_outer_composite_serialize ..." }
      end

      if client_side_validation
        unless (_outer_composite = outer_composite).nil?
          _outer_composite.validate if _outer_composite.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/fake/outer/composite"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = outer_composite.to_json

      # auth_names
      auth_names = [] of String

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "FakeApi.fake_outer_composite_serialize",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Test serialization of outer number types
    # @optional @param body [Float64?] Input number as post body
    # @return [Float64]
    def fake_outer_number_serialize(
      *,
      body : Float64? = nil
    ) : Float64
      data, _status_code, _headers = fake_outer_number_serialize_with_http_info(body: body)
      data
    end

    # Test serialization of outer number types
    # @optional @param body [Float64?] Input number as post body
    # @return [Tuple(Float64, Integer, Hash)] Float64, response status code and response headers
    def fake_outer_number_serialize_with_http_info(
      *,
      body : Float64? = nil
    ) : Tuple(Float64, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fake_outer_number_serialize(body: body)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: FakeApi#fake_outer_number_serialize\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Float64.from_json(body), status_code, headers)
    end

    # Test serialization of outer number types
    # @optional @param body [Float64?] Input number as post body
    # @return nil
    def fake_outer_number_serialize(
      *,
      body : Float64? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fake_outer_number_serialize(body: body).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_fake_outer_number_serialize(
      *,
      body : Float64? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: FakeApi.fake_outer_number_serialize ..." }
      end

      # resource path
      local_var_path = "/fake/outer/number"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = body.to_json

      # auth_names
      auth_names = [] of String

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "FakeApi.fake_outer_number_serialize",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Test serialization of outer string types
    # @optional @param body [String?] Input string as post body
    # @return [String]
    def fake_outer_string_serialize(
      *,
      body : String? = nil
    ) : String
      data, _status_code, _headers = fake_outer_string_serialize_with_http_info(body: body)
      data
    end

    # Test serialization of outer string types
    # @optional @param body [String?] Input string as post body
    # @return [Tuple(String, Integer, Hash)] String, response status code and response headers
    def fake_outer_string_serialize_with_http_info(
      *,
      body : String? = nil
    ) : Tuple(String, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_fake_outer_string_serialize(body: body)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: FakeApi#fake_outer_string_serialize\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(String.from_json(body), status_code, headers)
    end

    # Test serialization of outer string types
    # @optional @param body [String?] Input string as post body
    # @return nil
    def fake_outer_string_serialize(
      *,
      body : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_fake_outer_string_serialize(body: body).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_fake_outer_string_serialize(
      *,
      body : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: FakeApi.fake_outer_string_serialize ..." }
      end

      # resource path
      local_var_path = "/fake/outer/string"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = body.to_json

      # auth_names
      auth_names = [] of String

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "FakeApi.fake_outer_string_serialize",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Returns a user based on a single ID, if the user does not have access to the pet
    # @required @param id [String?] ID of pet to fetch
    # @return [PetStore::Pet]
    def find_pet_by_id(
      *,
      id : String? = "954b95b6-43cf-4104-8354-dea4d9b10ddf"
    ) : PetStore::Pet
      data, _status_code, _headers = find_pet_by_id_with_http_info(id: id)
      data
    end

    # Returns a user based on a single ID, if the user does not have access to the pet
    # @required @param id [String?] ID of pet to fetch
    # @return [Tuple(PetStore::Pet, Integer, Hash)] PetStore::Pet, response status code and response headers
    def find_pet_by_id_with_http_info(
      *,
      id : String? = "954b95b6-43cf-4104-8354-dea4d9b10ddf"
    ) : Tuple(PetStore::Pet, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_find_pet_by_id(id: id)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: FakeApi#find_pet_by_id\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(PetStore::Pet.from_json(body), status_code, headers)
    end

    # Returns a user based on a single ID, if the user does not have access to the pet
    # @required @param id [String?] ID of pet to fetch
    # @return nil
    def find_pet_by_id(
      *,
      id : String? = "954b95b6-43cf-4104-8354-dea4d9b10ddf",
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_find_pet_by_id(id: id).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_find_pet_by_id(
      *,
      id : String? = "954b95b6-43cf-4104-8354-dea4d9b10ddf"
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: FakeApi.find_pet_by_id ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"id\" is required and cannot be null") if id.nil?
      end

      # resource path
      local_var_path = "/fake/{id}".sub("{" + "id" + "}", URI.encode_path(id.to_s))

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = [] of String

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "FakeApi.find_pet_by_id",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # For this test, the body for this request much reference a schema named `File`.
    # @required @param file_schema_test_class [PetStore::FileSchemaTestClass?]
    # @return [Nil]
    def test_body_with_file_schema(
      *,
      file_schema_test_class : PetStore::FileSchemaTestClass? = nil
    ) : Nil
      test_body_with_file_schema_with_http_info(file_schema_test_class: file_schema_test_class)
      nil
    end

    # For this test, the body for this request much reference a schema named &#x60;File&#x60;.
    # @required @param file_schema_test_class [PetStore::FileSchemaTestClass?]
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def test_body_with_file_schema_with_http_info(
      *,
      file_schema_test_class : PetStore::FileSchemaTestClass? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_test_body_with_file_schema(file_schema_test_class: file_schema_test_class)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: FakeApi#test_body_with_file_schema\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # For this test, the body for this request much reference a schema named &#x60;File&#x60;.
    # @required @param file_schema_test_class [PetStore::FileSchemaTestClass?]
    # @return nil
    def test_body_with_file_schema(
      *,
      file_schema_test_class : PetStore::FileSchemaTestClass? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_test_body_with_file_schema(file_schema_test_class: file_schema_test_class).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_test_body_with_file_schema(
      *,
      file_schema_test_class : PetStore::FileSchemaTestClass? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: FakeApi.test_body_with_file_schema ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"file_schema_test_class\" is required and cannot be null") if file_schema_test_class.nil?
        unless (_file_schema_test_class = file_schema_test_class).nil?
          _file_schema_test_class.validate if _file_schema_test_class.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/fake/body-with-file-schema"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = file_schema_test_class.to_json

      # auth_names
      auth_names = [] of String

      @api_client.build_api_request(
        http_method: :"PUT",
        path: local_var_path,
        operation: "FakeApi.test_body_with_file_schema",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # @required @param query [String?]
    # @required @param user [PetStore::User?]
    # @return [Nil]
    def test_body_with_query_params(
      *,
      query : String? = nil,
      user : PetStore::User? = nil
    ) : Nil
      test_body_with_query_params_with_http_info(query: query, user: user)
      nil
    end

    # @required @param query [String?]
    # @required @param user [PetStore::User?]
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def test_body_with_query_params_with_http_info(
      *,
      query : String? = nil,
      user : PetStore::User? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_test_body_with_query_params(query: query, user: user)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: FakeApi#test_body_with_query_params\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # @required @param query [String?]
    # @required @param user [PetStore::User?]
    # @return nil
    def test_body_with_query_params(
      *,
      query : String? = nil,
      user : PetStore::User? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_test_body_with_query_params(query: query, user: user).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_test_body_with_query_params(
      *,
      query : String? = nil,
      user : PetStore::User? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: FakeApi.test_body_with_query_params ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"query\" is required and cannot be null") if query.nil?

        raise ArgumentError.new("\"user\" is required and cannot be null") if user.nil?
        unless (_user = user).nil?
          _user.validate if _user.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/fake/body-with-query-params"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["query"] = query.to_s if !query.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = user.to_json

      # auth_names
      auth_names = [] of String

      @api_client.build_api_request(
        http_method: :"PUT",
        path: local_var_path,
        operation: "FakeApi.test_body_with_query_params",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # To test \"client\" model
    # To test \"client\" model
    # @required @param client [PetStore::Client?] client model
    # @return [PetStore::Client]
    def test_client_model(
      *,
      client : PetStore::Client? = nil
    ) : PetStore::Client
      data, _status_code, _headers = test_client_model_with_http_info(client: client)
      data
    end

    # To test \&quot;client\&quot; model
    # To test \&quot;client\&quot; model
    # @required @param client [PetStore::Client?] client model
    # @return [Tuple(PetStore::Client, Integer, Hash)] PetStore::Client, response status code and response headers
    def test_client_model_with_http_info(
      *,
      client : PetStore::Client? = nil
    ) : Tuple(PetStore::Client, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_test_client_model(client: client)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: FakeApi#test_client_model\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(PetStore::Client.from_json(body), status_code, headers)
    end

    # To test \&quot;client\&quot; model
    # To test \&quot;client\&quot; model
    # @required @param client [PetStore::Client?] client model
    # @return nil
    def test_client_model(
      *,
      client : PetStore::Client? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_test_client_model(client: client).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_test_client_model(
      *,
      client : PetStore::Client? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: FakeApi.test_client_model ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"client\" is required and cannot be null") if client.nil?
        unless (_client = client).nil?
          _client.validate if _client.is_a?(OpenApi::Validatable)
        end
      end

      # resource path
      local_var_path = "/fake"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = client.to_json

      # auth_names
      auth_names = [] of String

      @api_client.build_api_request(
        http_method: :"PATCH",
        path: local_var_path,
        operation: "FakeApi.test_client_model",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트
    # Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트
    # @required @param number [Float64?] None
    # @required @param double [Float64?] None
    # @required @param pattern_without_delimiter [String?] None
    # @required @param byte [String?] None
    # @optional @param integer [Int32?] None
    # @optional @param int32 [Int32?] None
    # @optional @param int64 [Int64?] None
    # @optional @param float [Float32?] None
    # @optional @param string [String?] None
    # @optional @param binary [::File?] None
    # @optional @param date [Time?] None
    # @optional @param date_time [Time?] None
    # @optional @param password [String?] None
    # @optional @param callback [String?] None
    # @return [Nil]
    def test_endpoint_parameters(
      *,
      number : Float64? = nil,
      double : Float64? = nil,
      pattern_without_delimiter : String? = nil,
      byte : String? = nil,
      integer : Int32? = nil,
      int32 : Int32? = nil,
      int64 : Int64? = nil,
      float : Float32? = nil,
      string : String? = nil,
      binary : ::File? = nil,
      date : Time? = nil,
      date_time : Time? = nil,
      password : String? = nil,
      callback : String? = nil
    ) : Nil
      test_endpoint_parameters_with_http_info(number: number, double: double, pattern_without_delimiter: pattern_without_delimiter, byte: byte, integer: integer, int32: int32, int64: int64, float: float, string: string, binary: binary, date: date, date_time: date_time, password: password, callback: callback)
      nil
    end

    # Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트
    # Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트
    # @required @param number [Float64?] None
    # @required @param double [Float64?] None
    # @required @param pattern_without_delimiter [String?] None
    # @required @param byte [String?] None
    # @optional @param integer [Int32?] None
    # @optional @param int32 [Int32?] None
    # @optional @param int64 [Int64?] None
    # @optional @param float [Float32?] None
    # @optional @param string [String?] None
    # @optional @param binary [::File?] None
    # @optional @param date [Time?] None
    # @optional @param date_time [Time?] None
    # @optional @param password [String?] None
    # @optional @param callback [String?] None
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def test_endpoint_parameters_with_http_info(
      *,
      number : Float64? = nil,
      double : Float64? = nil,
      pattern_without_delimiter : String? = nil,
      byte : String? = nil,
      integer : Int32? = nil,
      int32 : Int32? = nil,
      int64 : Int64? = nil,
      float : Float32? = nil,
      string : String? = nil,
      binary : ::File? = nil,
      date : Time? = nil,
      date_time : Time? = nil,
      password : String? = nil,
      callback : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_test_endpoint_parameters(number: number, double: double, pattern_without_delimiter: pattern_without_delimiter, byte: byte, integer: integer, int32: int32, int64: int64, float: float, string: string, binary: binary, date: date, date_time: date_time, password: password, callback: callback)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: FakeApi#test_endpoint_parameters\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트
    # Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트
    # @required @param number [Float64?] None
    # @required @param double [Float64?] None
    # @required @param pattern_without_delimiter [String?] None
    # @required @param byte [String?] None
    # @optional @param integer [Int32?] None
    # @optional @param int32 [Int32?] None
    # @optional @param int64 [Int64?] None
    # @optional @param float [Float32?] None
    # @optional @param string [String?] None
    # @optional @param binary [::File?] None
    # @optional @param date [Time?] None
    # @optional @param date_time [Time?] None
    # @optional @param password [String?] None
    # @optional @param callback [String?] None
    # @return nil
    def test_endpoint_parameters(
      *,
      number : Float64? = nil,
      double : Float64? = nil,
      pattern_without_delimiter : String? = nil,
      byte : String? = nil,
      integer : Int32? = nil,
      int32 : Int32? = nil,
      int64 : Int64? = nil,
      float : Float32? = nil,
      string : String? = nil,
      binary : ::File? = nil,
      date : Time? = nil,
      date_time : Time? = nil,
      password : String? = nil,
      callback : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_test_endpoint_parameters(number: number, double: double, pattern_without_delimiter: pattern_without_delimiter, byte: byte, integer: integer, int32: int32, int64: int64, float: float, string: string, binary: binary, date: date, date_time: date_time, password: password, callback: callback).execute(&block)
    end

    TEST_ENDPOINT_PARAMETERS_MAX_FOR_NUMBER                        = Float64.new("543.2")
    TEST_ENDPOINT_PARAMETERS_MIN_FOR_NUMBER                        = Float64.new("32.1")
    TEST_ENDPOINT_PARAMETERS_MAX_FOR_DOUBLE                        = Float64.new("123.4")
    TEST_ENDPOINT_PARAMETERS_MIN_FOR_DOUBLE                        = Float64.new("67.8")
    TEST_ENDPOINT_PARAMETERS_PATTERN_FOR_PATTERN_WITHOUT_DELIMITER = /^[A-Z].*/
    TEST_ENDPOINT_PARAMETERS_MAX_FOR_INTEGER                       = Int32.new("100")
    TEST_ENDPOINT_PARAMETERS_MIN_FOR_INTEGER                       = Int32.new("10")
    TEST_ENDPOINT_PARAMETERS_MAX_FOR_INT32                         = Int32.new("200")
    TEST_ENDPOINT_PARAMETERS_MIN_FOR_INT32                         = Int32.new("20")
    TEST_ENDPOINT_PARAMETERS_MAX_FOR_FLOAT                         = Float32.new("987.6")
    TEST_ENDPOINT_PARAMETERS_PATTERN_FOR_STRING                    = /[a-z]/i
    TEST_ENDPOINT_PARAMETERS_MAX_LENGTH_FOR_PASSWORD               = 64
    TEST_ENDPOINT_PARAMETERS_MIN_LENGTH_FOR_PASSWORD               = 10

    # @return Crest::Request
    def build_api_request_for_test_endpoint_parameters(
      *,
      number : Float64? = nil,
      double : Float64? = nil,
      pattern_without_delimiter : String? = nil,
      byte : String? = nil,
      integer : Int32? = nil,
      int32 : Int32? = nil,
      int64 : Int64? = nil,
      float : Float32? = nil,
      string : String? = nil,
      binary : ::File? = nil,
      date : Time? = nil,
      date_time : Time? = nil,
      password : String? = nil,
      callback : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: FakeApi.test_endpoint_parameters ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"number\" is required and cannot be null") if number.nil?
        unless (_number = number).nil?
          OpenApi::PrimitiveValidator.validate_max_number("number", _number, TEST_ENDPOINT_PARAMETERS_MAX_FOR_NUMBER)
          OpenApi::PrimitiveValidator.validate_min_number("number", _number, TEST_ENDPOINT_PARAMETERS_MIN_FOR_NUMBER)
        end
        raise ArgumentError.new("\"double\" is required and cannot be null") if double.nil?
        unless (_double = double).nil?
          OpenApi::PrimitiveValidator.validate_max_number("double", _double, TEST_ENDPOINT_PARAMETERS_MAX_FOR_DOUBLE)
          OpenApi::PrimitiveValidator.validate_min_number("double", _double, TEST_ENDPOINT_PARAMETERS_MIN_FOR_DOUBLE)
        end
        raise ArgumentError.new("\"pattern_without_delimiter\" is required and cannot be null") if pattern_without_delimiter.nil?
        unless (_pattern_without_delimiter = pattern_without_delimiter).nil?
          OpenApi::PrimitiveValidator.validate_pattern("pattern_without_delimiter", _pattern_without_delimiter, TEST_ENDPOINT_PARAMETERS_PATTERN_FOR_PATTERN_WITHOUT_DELIMITER)
        end
        raise ArgumentError.new("\"byte\" is required and cannot be null") if byte.nil?

        unless (_integer = integer).nil?
          OpenApi::PrimitiveValidator.validate_max_number("integer", _integer, TEST_ENDPOINT_PARAMETERS_MAX_FOR_INTEGER)
          OpenApi::PrimitiveValidator.validate_min_number("integer", _integer, TEST_ENDPOINT_PARAMETERS_MIN_FOR_INTEGER)
        end
        unless (_int32 = int32).nil?
          OpenApi::PrimitiveValidator.validate_max_number("int32", _int32, TEST_ENDPOINT_PARAMETERS_MAX_FOR_INT32)
          OpenApi::PrimitiveValidator.validate_min_number("int32", _int32, TEST_ENDPOINT_PARAMETERS_MIN_FOR_INT32)
        end

        unless (_float = float).nil?
          OpenApi::PrimitiveValidator.validate_max_number("float", _float, TEST_ENDPOINT_PARAMETERS_MAX_FOR_FLOAT)
        end
        unless (_string = string).nil?
          OpenApi::PrimitiveValidator.validate_pattern("string", _string, TEST_ENDPOINT_PARAMETERS_PATTERN_FOR_STRING)
        end

        unless (_password = password).nil?
          OpenApi::PrimitiveValidator.validate_max_length("password", password.to_s.size, TEST_ENDPOINT_PARAMETERS_MAX_LENGTH_FOR_PASSWORD)
          OpenApi::PrimitiveValidator.validate_min_length("password", password.to_s.size, TEST_ENDPOINT_PARAMETERS_MIN_LENGTH_FOR_PASSWORD)
        end
      end

      # resource path
      local_var_path = "/fake"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["integer"] = integer.to_s if !integer.nil?
      form_params["int32"] = int32.to_s if !int32.nil?
      form_params["int64"] = int64.to_s if !int64.nil?
      form_params["number"] = number.to_s if !number.nil?
      form_params["float"] = float.to_s if !float.nil?
      form_params["double"] = double.to_s if !double.nil?
      form_params["string"] = string.to_s if !string.nil?
      form_params["pattern_without_delimiter"] = pattern_without_delimiter.to_s if !pattern_without_delimiter.nil?
      form_params["byte"] = byte.to_s if !byte.nil?
      form_params["binary"] = binary if !binary.nil?
      form_params["date"] = Time::Format::ISO_8601_DATE.format(date) if !date.nil?
      form_params["dateTime"] = Time::Format::RFC_3339.format(date_time) if !date_time.nil?
      form_params["password"] = password.to_s if !password.nil?
      form_params["callback"] = callback.to_s if !callback.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["http_basic_test"]

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "FakeApi.test_endpoint_parameters",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # To test enum parameters
    # To test enum parameters
    # @optional @param enum_header_string_array [Array(String)?] Header parameter enum test (string array)
    # @optional @param enum_header_string [String?] Header parameter enum test (string)
    # @optional @param enum_query_string_array [Array(String)?] Query parameter enum test (string array)
    # @optional @param enum_query_string [String?] Query parameter enum test (string)
    # @optional @param enum_query_integer [Int32?] Query parameter enum test (double)
    # @optional @param enum_query_double [Float64?] Query parameter enum test (double)
    # @optional @param enum_form_string_array [Array(String)?] Form parameter enum test (string array)
    # @optional @param enum_form_string [String?] Form parameter enum test (string)
    # @return [Nil]
    def test_enum_parameters(
      *,
      enum_header_string_array : Array(String)? = nil,
      enum_header_string : String? = "-efg",
      enum_query_string_array : Array(String)? = nil,
      enum_query_string : String? = "-efg",
      enum_query_integer : Int32? = nil,
      enum_query_double : Float64? = nil,
      enum_form_string_array : Array(String)? = ["$"],
      enum_form_string : String? = "-efg"
    ) : Nil
      test_enum_parameters_with_http_info(enum_header_string_array: enum_header_string_array, enum_header_string: enum_header_string, enum_query_string_array: enum_query_string_array, enum_query_string: enum_query_string, enum_query_integer: enum_query_integer, enum_query_double: enum_query_double, enum_form_string_array: enum_form_string_array, enum_form_string: enum_form_string)
      nil
    end

    # To test enum parameters
    # To test enum parameters
    # @optional @param enum_header_string_array [Array(String)?] Header parameter enum test (string array)
    # @optional @param enum_header_string [String?] Header parameter enum test (string)
    # @optional @param enum_query_string_array [Array(String)?] Query parameter enum test (string array)
    # @optional @param enum_query_string [String?] Query parameter enum test (string)
    # @optional @param enum_query_integer [Int32?] Query parameter enum test (double)
    # @optional @param enum_query_double [Float64?] Query parameter enum test (double)
    # @optional @param enum_form_string_array [Array(String)?] Form parameter enum test (string array)
    # @optional @param enum_form_string [String?] Form parameter enum test (string)
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def test_enum_parameters_with_http_info(
      *,
      enum_header_string_array : Array(String)? = nil,
      enum_header_string : String? = "-efg",
      enum_query_string_array : Array(String)? = nil,
      enum_query_string : String? = "-efg",
      enum_query_integer : Int32? = nil,
      enum_query_double : Float64? = nil,
      enum_form_string_array : Array(String)? = ["$"],
      enum_form_string : String? = "-efg"
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_test_enum_parameters(enum_header_string_array: enum_header_string_array, enum_header_string: enum_header_string, enum_query_string_array: enum_query_string_array, enum_query_string: enum_query_string, enum_query_integer: enum_query_integer, enum_query_double: enum_query_double, enum_form_string_array: enum_form_string_array, enum_form_string: enum_form_string)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: FakeApi#test_enum_parameters\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # To test enum parameters
    # To test enum parameters
    # @optional @param enum_header_string_array [Array(String)?] Header parameter enum test (string array)
    # @optional @param enum_header_string [String?] Header parameter enum test (string)
    # @optional @param enum_query_string_array [Array(String)?] Query parameter enum test (string array)
    # @optional @param enum_query_string [String?] Query parameter enum test (string)
    # @optional @param enum_query_integer [Int32?] Query parameter enum test (double)
    # @optional @param enum_query_double [Float64?] Query parameter enum test (double)
    # @optional @param enum_form_string_array [Array(String)?] Form parameter enum test (string array)
    # @optional @param enum_form_string [String?] Form parameter enum test (string)
    # @return nil
    def test_enum_parameters(
      *,
      enum_header_string_array : Array(String)? = nil,
      enum_header_string : String? = "-efg",
      enum_query_string_array : Array(String)? = nil,
      enum_query_string : String? = "-efg",
      enum_query_integer : Int32? = nil,
      enum_query_double : Float64? = nil,
      enum_form_string_array : Array(String)? = ["$"],
      enum_form_string : String? = "-efg",
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_test_enum_parameters(enum_header_string_array: enum_header_string_array, enum_header_string: enum_header_string, enum_query_string_array: enum_query_string_array, enum_query_string: enum_query_string, enum_query_integer: enum_query_integer, enum_query_double: enum_query_double, enum_form_string_array: enum_form_string_array, enum_form_string: enum_form_string).execute(&block)
    end

    TEST_ENUM_PARAMETERS_VALID_VALUES_FOR_ENUM_HEADER_STRING_ARRAY = String.static_array(">", "$")
    TEST_ENUM_PARAMETERS_VALID_VALUES_FOR_ENUM_HEADER_STRING       = String.static_array("_abc", "-efg", "(xyz)")
    TEST_ENUM_PARAMETERS_VALID_VALUES_FOR_ENUM_QUERY_STRING_ARRAY  = String.static_array(">", "$")
    TEST_ENUM_PARAMETERS_VALID_VALUES_FOR_ENUM_QUERY_STRING        = String.static_array("_abc", "-efg", "(xyz)")
    TEST_ENUM_PARAMETERS_VALID_VALUES_FOR_ENUM_QUERY_INTEGER       = Int32.static_array("1", "-2")
    TEST_ENUM_PARAMETERS_VALID_VALUES_FOR_ENUM_QUERY_DOUBLE        = Float64.static_array("1.1", "-1.2")
    TEST_ENUM_PARAMETERS_VALID_VALUES_FOR_ENUM_FORM_STRING_ARRAY   = String.static_array(">", "$")
    TEST_ENUM_PARAMETERS_VALID_VALUES_FOR_ENUM_FORM_STRING         = String.static_array("_abc", "-efg", "(xyz)")

    # @return Crest::Request
    def build_api_request_for_test_enum_parameters(
      *,
      enum_header_string_array : Array(String)? = nil,
      enum_header_string : String? = "-efg",
      enum_query_string_array : Array(String)? = nil,
      enum_query_string : String? = "-efg",
      enum_query_integer : Int32? = nil,
      enum_query_double : Float64? = nil,
      enum_form_string_array : Array(String)? = ["$"],
      enum_form_string : String? = "-efg"
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: FakeApi.test_enum_parameters ..." }
      end

      if client_side_validation
        unless (_enum_header_string_array = enum_header_string_array).nil?
          OpenApi::EnumValidator.validate("enum_header_string_array", _enum_header_string_array, TEST_ENUM_PARAMETERS_VALID_VALUES_FOR_ENUM_HEADER_STRING_ARRAY)
        end
        unless (_enum_header_string = enum_header_string).nil?
          OpenApi::EnumValidator.validate("enum_header_string", _enum_header_string, TEST_ENUM_PARAMETERS_VALID_VALUES_FOR_ENUM_HEADER_STRING)
        end
        unless (_enum_query_string_array = enum_query_string_array).nil?
          OpenApi::EnumValidator.validate("enum_query_string_array", _enum_query_string_array, TEST_ENUM_PARAMETERS_VALID_VALUES_FOR_ENUM_QUERY_STRING_ARRAY)
        end
        unless (_enum_query_string = enum_query_string).nil?
          OpenApi::EnumValidator.validate("enum_query_string", _enum_query_string, TEST_ENUM_PARAMETERS_VALID_VALUES_FOR_ENUM_QUERY_STRING)
        end
        unless (_enum_query_integer = enum_query_integer).nil?
          OpenApi::EnumValidator.validate("enum_query_integer", _enum_query_integer, TEST_ENUM_PARAMETERS_VALID_VALUES_FOR_ENUM_QUERY_INTEGER)
        end
        unless (_enum_query_double = enum_query_double).nil?
          OpenApi::EnumValidator.validate("enum_query_double", _enum_query_double, TEST_ENUM_PARAMETERS_VALID_VALUES_FOR_ENUM_QUERY_DOUBLE)
        end
        unless (_enum_form_string_array = enum_form_string_array).nil?
          OpenApi::EnumValidator.validate("enum_form_string_array", _enum_form_string_array, TEST_ENUM_PARAMETERS_VALID_VALUES_FOR_ENUM_FORM_STRING_ARRAY)
        end
        unless (_enum_form_string = enum_form_string).nil?
          OpenApi::EnumValidator.validate("enum_form_string", _enum_form_string, TEST_ENUM_PARAMETERS_VALID_VALUES_FOR_ENUM_FORM_STRING)
        end
      end

      # resource path
      local_var_path = "/fake"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["enum_query_string_array"] = @api_client.build_collection_param(enum_query_string_array, "multi") if !enum_query_string_array.nil? && !enum_query_string_array.empty?
      query_params["enum_query_string"] = enum_query_string.to_s if !enum_query_string.nil?
      query_params["enum_query_integer"] = enum_query_integer.to_s if !enum_query_integer.nil?
      query_params["enum_query_double"] = enum_query_double.to_s if !enum_query_double.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])
      header_params["enum_header_string_array"] = @api_client.build_header_param(enum_header_string_array) if !enum_header_string_array.nil? && !enum_header_string_array.empty?
      header_params["enum_header_string"] = enum_header_string.to_s if !enum_header_string.nil?

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["enum_form_string_array"] = @api_client.build_collection_param(enum_form_string_array, "csv") if !enum_form_string_array.nil? && !enum_form_string_array.empty?
      form_params["enum_form_string"] = enum_form_string.to_s if !enum_form_string.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = [] of String

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "FakeApi.test_enum_parameters",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # Fake endpoint to test group parameters (optional)
    # Fake endpoint to test group parameters (optional)
    # @required @param required_string_group [Int32?] Required String in group parameters
    # @required @param required_boolean_group [Bool?] Required Boolean in group parameters
    # @required @param required_int64_group [Int64?] Required Integer in group parameters
    # @optional @param string_group [Int32?] String in group parameters
    # @optional @param boolean_group [Bool?] Boolean in group parameters
    # @optional @param int64_group [Int64?] Integer in group parameters
    # @return [Nil]
    def test_group_parameters(
      *,
      required_string_group : Int32? = nil,
      required_boolean_group : Bool? = nil,
      required_int64_group : Int64? = nil,
      string_group : Int32? = nil,
      boolean_group : Bool? = nil,
      int64_group : Int64? = nil
    ) : Nil
      test_group_parameters_with_http_info(required_string_group: required_string_group, required_boolean_group: required_boolean_group, required_int64_group: required_int64_group, string_group: string_group, boolean_group: boolean_group, int64_group: int64_group)
      nil
    end

    # Fake endpoint to test group parameters (optional)
    # Fake endpoint to test group parameters (optional)
    # @required @param required_string_group [Int32?] Required String in group parameters
    # @required @param required_boolean_group [Bool?] Required Boolean in group parameters
    # @required @param required_int64_group [Int64?] Required Integer in group parameters
    # @optional @param string_group [Int32?] String in group parameters
    # @optional @param boolean_group [Bool?] Boolean in group parameters
    # @optional @param int64_group [Int64?] Integer in group parameters
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def test_group_parameters_with_http_info(
      *,
      required_string_group : Int32? = nil,
      required_boolean_group : Bool? = nil,
      required_int64_group : Int64? = nil,
      string_group : Int32? = nil,
      boolean_group : Bool? = nil,
      int64_group : Int64? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_test_group_parameters(required_string_group: required_string_group, required_boolean_group: required_boolean_group, required_int64_group: required_int64_group, string_group: string_group, boolean_group: boolean_group, int64_group: int64_group)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: FakeApi#test_group_parameters\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # Fake endpoint to test group parameters (optional)
    # Fake endpoint to test group parameters (optional)
    # @required @param required_string_group [Int32?] Required String in group parameters
    # @required @param required_boolean_group [Bool?] Required Boolean in group parameters
    # @required @param required_int64_group [Int64?] Required Integer in group parameters
    # @optional @param string_group [Int32?] String in group parameters
    # @optional @param boolean_group [Bool?] Boolean in group parameters
    # @optional @param int64_group [Int64?] Integer in group parameters
    # @return nil
    def test_group_parameters(
      *,
      required_string_group : Int32? = nil,
      required_boolean_group : Bool? = nil,
      required_int64_group : Int64? = nil,
      string_group : Int32? = nil,
      boolean_group : Bool? = nil,
      int64_group : Int64? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_test_group_parameters(required_string_group: required_string_group, required_boolean_group: required_boolean_group, required_int64_group: required_int64_group, string_group: string_group, boolean_group: boolean_group, int64_group: int64_group).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_test_group_parameters(
      *,
      required_string_group : Int32? = nil,
      required_boolean_group : Bool? = nil,
      required_int64_group : Int64? = nil,
      string_group : Int32? = nil,
      boolean_group : Bool? = nil,
      int64_group : Int64? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: FakeApi.test_group_parameters ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"required_string_group\" is required and cannot be null") if required_string_group.nil?

        raise ArgumentError.new("\"required_boolean_group\" is required and cannot be null") if required_boolean_group.nil?

        raise ArgumentError.new("\"required_int64_group\" is required and cannot be null") if required_int64_group.nil?
      end

      # resource path
      local_var_path = "/fake"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["required_string_group"] = required_string_group.to_s if !required_string_group.nil?
      query_params["required_int64_group"] = required_int64_group.to_s if !required_int64_group.nil?
      query_params["string_group"] = string_group.to_s if !string_group.nil?
      query_params["int64_group"] = int64_group.to_s if !int64_group.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["required_boolean_group"] = required_boolean_group.to_s if !required_boolean_group.nil?
      header_params["boolean_group"] = boolean_group.to_s if !boolean_group.nil?

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = ["bearer_test"]

      @api_client.build_api_request(
        http_method: :"DELETE",
        path: local_var_path,
        operation: "FakeApi.test_group_parameters",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # test inline additionalProperties
    #
    # @required @param request_body [Hash(String, String)?] request body
    # @return [Nil]
    def test_inline_additional_properties(
      *,
      request_body : Hash(String, String)? = nil
    ) : Nil
      test_inline_additional_properties_with_http_info(request_body: request_body)
      nil
    end

    # test inline additionalProperties
    #
    # @required @param request_body [Hash(String, String)?] request body
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def test_inline_additional_properties_with_http_info(
      *,
      request_body : Hash(String, String)? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_test_inline_additional_properties(request_body: request_body)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: FakeApi#test_inline_additional_properties\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # test inline additionalProperties
    #
    # @required @param request_body [Hash(String, String)?] request body
    # @return nil
    def test_inline_additional_properties(
      *,
      request_body : Hash(String, String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_test_inline_additional_properties(request_body: request_body).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_test_inline_additional_properties(
      *,
      request_body : Hash(String, String)? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: FakeApi.test_inline_additional_properties ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"request_body\" is required and cannot be null") if request_body.nil?
      end

      # resource path
      local_var_path = "/fake/inline-additionalProperties"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = request_body.to_json

      # auth_names
      auth_names = [] of String

      @api_client.build_api_request(
        http_method: :"POST",
        path: local_var_path,
        operation: "FakeApi.test_inline_additional_properties",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # test json serialization of form data
    #
    # @required @param param [String?] field1
    # @required @param param2 [String?] field2
    # @return [Nil]
    def test_json_form_data(
      *,
      param : String? = nil,
      param2 : String? = nil
    ) : Nil
      test_json_form_data_with_http_info(param: param, param2: param2)
      nil
    end

    # test json serialization of form data
    #
    # @required @param param [String?] field1
    # @required @param param2 [String?] field2
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def test_json_form_data_with_http_info(
      *,
      param : String? = nil,
      param2 : String? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_test_json_form_data(param: param, param2: param2)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: FakeApi#test_json_form_data\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # test json serialization of form data
    #
    # @required @param param [String?] field1
    # @required @param param2 [String?] field2
    # @return nil
    def test_json_form_data(
      *,
      param : String? = nil,
      param2 : String? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_test_json_form_data(param: param, param2: param2).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_test_json_form_data(
      *,
      param : String? = nil,
      param2 : String? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: FakeApi.test_json_form_data ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"param\" is required and cannot be null") if param.nil?

        raise ArgumentError.new("\"param2\" is required and cannot be null") if param2.nil?
      end

      # resource path
      local_var_path = "/fake/jsonFormData"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/x-www-form-urlencoded"])

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = Hash(String, (String | Array(String) | IO)).new
      form_params["param"] = param.to_s if !param.nil?
      form_params["param2"] = param2.to_s if !param2.nil?

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = [] of String

      @api_client.build_api_request(
        http_method: :"GET",
        path: local_var_path,
        operation: "FakeApi.test_json_form_data",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # To test the collection format in query parameters
    # @required @param pipe [Array(String)?]
    # @required @param ioutil [Array(String)?]
    # @required @param http [Array(String)?]
    # @required @param url [Array(String)?]
    # @required @param context [Array(String)?]
    # @return [Nil]
    def test_query_parameter_collection_format(
      *,
      pipe : Array(String)? = nil,
      ioutil : Array(String)? = nil,
      http : Array(String)? = nil,
      url : Array(String)? = nil,
      context : Array(String)? = nil
    ) : Nil
      test_query_parameter_collection_format_with_http_info(pipe: pipe, ioutil: ioutil, http: http, url: url, context: context)
      nil
    end

    # To test the collection format in query parameters
    # @required @param pipe [Array(String)?]
    # @required @param ioutil [Array(String)?]
    # @required @param http [Array(String)?]
    # @required @param url [Array(String)?]
    # @required @param context [Array(String)?]
    # @return [Tuple(Nil, Integer, Hash)] Nil, response status code and response headers
    def test_query_parameter_collection_format_with_http_info(
      *,
      pipe : Array(String)? = nil,
      ioutil : Array(String)? = nil,
      http : Array(String)? = nil,
      url : Array(String)? = nil,
      context : Array(String)? = nil
    ) : Tuple(Nil, Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_test_query_parameter_collection_format(pipe: pipe, ioutil: ioutil, http: http, url: url, context: context)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: FakeApi#test_query_parameter_collection_format\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(nil, status_code, headers)
    end

    # To test the collection format in query parameters
    # @required @param pipe [Array(String)?]
    # @required @param ioutil [Array(String)?]
    # @required @param http [Array(String)?]
    # @required @param url [Array(String)?]
    # @required @param context [Array(String)?]
    # @return nil
    def test_query_parameter_collection_format(
      *,
      pipe : Array(String)? = nil,
      ioutil : Array(String)? = nil,
      http : Array(String)? = nil,
      url : Array(String)? = nil,
      context : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_test_query_parameter_collection_format(pipe: pipe, ioutil: ioutil, http: http, url: url, context: context).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_test_query_parameter_collection_format(
      *,
      pipe : Array(String)? = nil,
      ioutil : Array(String)? = nil,
      http : Array(String)? = nil,
      url : Array(String)? = nil,
      context : Array(String)? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: FakeApi.test_query_parameter_collection_format ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"pipe\" is required and cannot be null") if pipe.nil?

        raise ArgumentError.new("\"ioutil\" is required and cannot be null") if ioutil.nil?

        raise ArgumentError.new("\"http\" is required and cannot be null") if http.nil?

        raise ArgumentError.new("\"url\" is required and cannot be null") if url.nil?

        raise ArgumentError.new("\"context\" is required and cannot be null") if context.nil?
      end

      # resource path
      local_var_path = "/fake/test-query-parameters"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["pipe"] = @api_client.build_collection_param(pipe, "multi") if !pipe.nil? && !pipe.empty?
      query_params["ioutil"] = @api_client.build_collection_param(ioutil, "csv") if !ioutil.nil? && !ioutil.empty?
      query_params["http"] = @api_client.build_collection_param(http, "ssv") if !http.nil? && !http.empty?
      query_params["url"] = @api_client.build_collection_param(url, "csv") if !url.nil? && !url.empty?
      query_params["context"] = @api_client.build_collection_param(context, "multi") if !context.nil? && !context.empty?

      # header parameters
      header_params = Hash(String, String).new

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = [] of String

      @api_client.build_api_request(
        http_method: :"PUT",
        path: local_var_path,
        operation: "FakeApi.test_query_parameter_collection_format",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end

    # To test unique items in header and query parameters
    # @required @param query_unique [Array(String)?]
    # @required @param header_unique [Array(String)?]
    # @return [Array(PetStore::Pet)]
    def test_unique_items_header_and_query_parameter_collection_format(
      *,
      query_unique : Array(String)? = nil,
      header_unique : Array(String)? = nil
    ) : Array(PetStore::Pet)
      data, _status_code, _headers = test_unique_items_header_and_query_parameter_collection_format_with_http_info(query_unique: query_unique, header_unique: header_unique)
      data
    end

    # To test unique items in header and query parameters
    # @required @param query_unique [Array(String)?]
    # @required @param header_unique [Array(String)?]
    # @return [Tuple(Array(PetStore::Pet), Integer, Hash)] Array(PetStore::Pet), response status code and response headers
    def test_unique_items_header_and_query_parameter_collection_format_with_http_info(
      *,
      query_unique : Array(String)? = nil,
      header_unique : Array(String)? = nil
    ) : Tuple(Array(PetStore::Pet), Int32, Hash(String, Array(String) | String))
      request = build_api_request_for_test_unique_items_header_and_query_parameter_collection_format(query_unique: query_unique, header_unique: header_unique)

      body, status_code, headers = @api_client.execute_api_request(request)

      if debugging
        Log.debug { "API called: FakeApi#test_unique_items_header_and_query_parameter_collection_format\nBody: #{body.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" }
      end

      Tuple.new(Array(PetStore::Pet).from_json(body), status_code, headers)
    end

    # To test unique items in header and query parameters
    # @required @param query_unique [Array(String)?]
    # @required @param header_unique [Array(String)?]
    # @return nil
    def test_unique_items_header_and_query_parameter_collection_format(
      *,
      query_unique : Array(String)? = nil,
      header_unique : Array(String)? = nil,
      &block : Crest::Response ->
    ) : Nil
      build_api_request_for_test_unique_items_header_and_query_parameter_collection_format(query_unique: query_unique, header_unique: header_unique).execute(&block)
    end

    # @return Crest::Request
    def build_api_request_for_test_unique_items_header_and_query_parameter_collection_format(
      *,
      query_unique : Array(String)? = nil,
      header_unique : Array(String)? = nil
    ) : Crest::Request
      if debugging
        Log.debug { "Calling API: FakeApi.test_unique_items_header_and_query_parameter_collection_format ..." }
      end

      if client_side_validation
        raise ArgumentError.new("\"query_unique\" is required and cannot be null") if query_unique.nil?

        raise ArgumentError.new("\"header_unique\" is required and cannot be null") if header_unique.nil?
      end

      # resource path
      local_var_path = "/fake/test-unique-parameters"

      # query parameters
      query_params = Hash(String, (String | Array(String))).new
      query_params["queryUnique"] = @api_client.build_collection_param(query_unique, "multi") if !query_unique.nil? && !query_unique.empty?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      header_params["headerUnique"] = @api_client.build_header_param(header_unique) if !header_unique.nil? && !header_unique.empty?

      # cookie parameters
      cookie_params = Hash(String, String).new

      # form parameters
      form_params = nil

      # http body (model)
      post_body = nil

      # auth_names
      auth_names = [] of String

      @api_client.build_api_request(
        http_method: :"PUT",
        path: local_var_path,
        operation: "FakeApi.test_unique_items_header_and_query_parameter_collection_format",
        post_body: post_body,
        auth_names: auth_names,
        header_params: header_params,
        cookie_params: cookie_params,
        query_params: query_params,
        form_params: form_params
      )
    end
  end
end
