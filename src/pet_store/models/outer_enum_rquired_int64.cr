#  OpenAPI Petstore
#
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
#
# The version of the OpenAPI document: 1.0.0
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module PetStore
  class OuterEnumRquiredInt64
    include OpenApi::Validatable
    include OpenApi::Json

    property data : Int64

    ERROR_MESSAGE = %{invalid value for "outerEnumRquiredInt64", must be one of ["1", "2", "3"].}

    VALID_VALUES = StaticArray[Int64.new("1"), Int64.new("2"), Int64.new("3")]

    delegate to_json_object_key, to: @data

    def self.from_json(value : JSON::PullParser) : OuterEnumRquiredInt64
      new(value)
    end

    def self.to_json(value : OuterEnumRquiredInt64, json : JSON::Builder) : Nil
      value.to_json(json)
    end

    def self.new(pull : JSON::PullParser)
      new(Int64.new(pull))
    end

    def self.from_json_object_key?(key : String)
      Int64.from_json_object_key?(key)
    end

    def self.new!(data : Int64)
      new(data).tap(&.validate)
    end

    def initialize(@data : Int64)
    end

    def error_message : String
      ERROR_MESSAGE
    end

    def list_invalid_properties : Array(String)
      errors = Array(String).new
      errors.push(error_message) unless valid?
      errors
    end

    def valid? : Bool
      OpenApi::EnumValidator.valid?(data, VALID_VALUES, false)
    end

    def validate : Nil
      OpenApi::EnumValidator.validate("outerEnumRquiredInt64", data, VALID_VALUES, false)
    end

    def to_json(json : JSON::Builder) : Nil
      @data.to_json(json)
    end

    def_equals_and_hash(@data)
  end
end
