#  OpenAPI Petstore
#
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
#
# The version of the OpenAPI document: 1.0.0
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module PetStore
  @[JSON::Serializable::Options(emit_nulls: true)]
  class NullableClass
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties

    @[JSON::Field(key: "integer_prop", type: Int32?, presence: true, ignore_serialize: integer_prop.nil? && !integer_prop_present?)]
    property integer_prop : Int32?

    @[JSON::Field(ignore: true)]
    property? integer_prop_present : Bool = false

    @[JSON::Field(key: "number_prop", type: Float64?, presence: true, ignore_serialize: number_prop.nil? && !number_prop_present?)]
    property number_prop : Float64?

    @[JSON::Field(ignore: true)]
    property? number_prop_present : Bool = false

    @[JSON::Field(key: "boolean_prop", type: Bool?, default: false, presence: true, ignore_serialize: boolean_prop.nil? && !boolean_prop_present?)]
    property boolean_prop : Bool?

    @[JSON::Field(ignore: true)]
    property? boolean_prop_present : Bool = false

    @[JSON::Field(key: "string_prop", type: String?, presence: true, ignore_serialize: string_prop.nil? && !string_prop_present?)]
    property string_prop : String?

    @[JSON::Field(ignore: true)]
    property? string_prop_present : Bool = false

    @[JSON::Field(key: "date_prop", type: Time?, converter: Time::ISO8601DateConverter, presence: true, ignore_serialize: date_prop.nil? && !date_prop_present?)]
    property date_prop : Time?

    @[JSON::Field(ignore: true)]
    property? date_prop_present : Bool = false

    @[JSON::Field(key: "datetime_prop", type: Time?, converter: Time::RFC3339Converter, presence: true, ignore_serialize: datetime_prop.nil? && !datetime_prop_present?)]
    property datetime_prop : Time?

    @[JSON::Field(ignore: true)]
    property? datetime_prop_present : Bool = false

    @[JSON::Field(key: "array_nullable_prop", type: Array(JSON::Any)?, presence: true, ignore_serialize: array_nullable_prop.nil? && !array_nullable_prop_present?)]
    property array_nullable_prop : Array(JSON::Any)?

    @[JSON::Field(ignore: true)]
    property? array_nullable_prop_present : Bool = false

    @[JSON::Field(key: "array_and_items_nullable_prop", type: Array(JSON::Any)?, presence: true, ignore_serialize: array_and_items_nullable_prop.nil? && !array_and_items_nullable_prop_present?)]
    property array_and_items_nullable_prop : Array(JSON::Any)?

    @[JSON::Field(ignore: true)]
    property? array_and_items_nullable_prop_present : Bool = false

    @[JSON::Field(key: "array_items_nullable", type: Array(JSON::Any)?, presence: true, ignore_serialize: array_items_nullable.nil? && !array_items_nullable_present?)]
    property array_items_nullable : Array(JSON::Any)?

    @[JSON::Field(ignore: true)]
    property? array_items_nullable_present : Bool = false

    @[JSON::Field(key: "object_nullable_prop", type: Hash(String, JSON::Any)?, presence: true, ignore_serialize: object_nullable_prop.nil? && !object_nullable_prop_present?)]
    property object_nullable_prop : Hash(String, JSON::Any)?

    @[JSON::Field(ignore: true)]
    property? object_nullable_prop_present : Bool = false

    @[JSON::Field(key: "object_and_items_nullable_prop", type: Hash(String, JSON::Any)?, presence: true, ignore_serialize: object_and_items_nullable_prop.nil? && !object_and_items_nullable_prop_present?)]
    property object_and_items_nullable_prop : Hash(String, JSON::Any)?

    @[JSON::Field(ignore: true)]
    property? object_and_items_nullable_prop_present : Bool = false

    @[JSON::Field(key: "object_items_nullable", type: Hash(String, JSON::Any)?, presence: true, ignore_serialize: object_items_nullable.nil? && !object_items_nullable_present?)]
    property object_items_nullable : Hash(String, JSON::Any)?

    @[JSON::Field(ignore: true)]
    property? object_items_nullable_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @integer_prop : Int32? = nil,
      @number_prop : Float64? = nil,
      @boolean_prop : Bool? = false,
      @string_prop : String? = nil,
      @date_prop : Time? = nil,
      @datetime_prop : Time? = nil,
      @array_nullable_prop : Array(JSON::Any)? = nil,
      @array_and_items_nullable_prop : Array(JSON::Any)? = nil,
      @array_items_nullable : Array(JSON::Any)? = nil,
      @object_nullable_prop : Hash(String, JSON::Any)? = nil,
      @object_and_items_nullable_prop : Hash(String, JSON::Any)? = nil,
      @object_items_nullable : Hash(String, JSON::Any)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@integer_prop, @number_prop, @boolean_prop, @string_prop, @date_prop, @datetime_prop, @array_nullable_prop, @array_and_items_nullable_prop, @array_items_nullable, @object_nullable_prop, @object_and_items_nullable_prop, @object_items_nullable)
  end
end
