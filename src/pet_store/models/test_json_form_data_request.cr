#  OpenAPI Petstore
#
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
#
# The version of the OpenAPI document: 1.0.0
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module PetStore
  class TestJsonFormDataRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    # field1
    @[JSON::Field(key: "param", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter param : String? = nil

    # field2
    @[JSON::Field(key: "param2", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter param2 : String? = nil

    # End of Required Properties

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @param : String? = nil,
      @param2 : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"param\" is required and cannot be null") if @param.nil?

      invalid_properties.push("\"param2\" is required and cannot be null") if @param2.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @param.nil?

      return false if @param2.nil?

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] param Object to be assigned
    def param=(new_value : String?)
      raise ArgumentError.new("\"param\" is required and cannot be null") if new_value.nil?

      @param = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] param2 Object to be assigned
    def param2=(new_value : String?)
      raise ArgumentError.new("\"param2\" is required and cannot be null") if new_value.nil?

      @param2 = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@param, @param2)
  end
end
