#  OpenAPI Petstore
#
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
#
# The version of the OpenAPI document: 1.0.0
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module PetStore
  class EnumTest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "enum_string_required", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter enum_string_required : String? = nil
    ERROR_MESSAGE_FOR_ENUM_STRING_REQUIRED = "invalid value for \"enum_string_required\", must be one of [UPPER, lower, ]."
    VALID_VALUES_FOR_ENUM_STRING_REQUIRED  = String.static_array("UPPER", "lower", "")

    @[JSON::Field(key: "outerEnumRquired", type: PetStore::OuterEnumRquired?, default: nil, required: true, nullable: false, emit_null: false)]
    getter outer_enum_rquired : PetStore::OuterEnumRquired? = nil

    @[JSON::Field(key: "outerEnumRquiredInt64", type: PetStore::OuterEnumRquiredInt64?, default: PetStore::OuterEnumRquiredInt64.new(3), required: true, nullable: false, emit_null: false)]
    getter outer_enum_rquired_int64 : PetStore::OuterEnumRquiredInt64? = PetStore::OuterEnumRquiredInt64.new(3)

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "enum_string", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter enum_string : String? = nil
    ERROR_MESSAGE_FOR_ENUM_STRING = "invalid value for \"enum_string\", must be one of [UPPER, lower, ]."
    VALID_VALUES_FOR_ENUM_STRING  = String.static_array("UPPER", "lower", "")

    @[JSON::Field(key: "enum_int32", type: Int32?, default: nil, required: false, nullable: false, emit_null: false)]
    getter enum_int32 : Int32? = nil
    ERROR_MESSAGE_FOR_ENUM_INT32 = "invalid value for \"enum_int32\", must be one of [1, -1]."
    VALID_VALUES_FOR_ENUM_INT32  = Int32.static_array("1", "-1")

    @[JSON::Field(key: "enum_int64", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter enum_int64 : Int64? = nil
    ERROR_MESSAGE_FOR_ENUM_INT64 = "invalid value for \"enum_int64\", must be one of [1, -1]."
    VALID_VALUES_FOR_ENUM_INT64  = Int64.static_array("1", "-1")

    @[JSON::Field(key: "enum_float", type: Float32?, default: nil, required: false, nullable: false, emit_null: false)]
    getter enum_float : Float32? = nil
    ERROR_MESSAGE_FOR_ENUM_FLOAT = "invalid value for \"enum_float\", must be one of [1.1, -1.2]."
    VALID_VALUES_FOR_ENUM_FLOAT  = Float32.static_array("1.1", "-1.2")

    @[JSON::Field(key: "enum_double", type: Float64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter enum_double : Float64? = nil
    ERROR_MESSAGE_FOR_ENUM_DOUBLE = "invalid value for \"enum_double\", must be one of [1.1, -1.2]."
    VALID_VALUES_FOR_ENUM_DOUBLE  = Float64.static_array("1.1", "-1.2")

    @[JSON::Field(key: "outerEnum", type: PetStore::OuterEnum?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: outer_enum.nil? && !outer_enum_present?)]
    getter outer_enum : PetStore::OuterEnum? = nil

    @[JSON::Field(ignore: true)]
    property? outer_enum_present : Bool = false

    @[JSON::Field(key: "outerEnumInteger", type: PetStore::OuterEnumInteger?, default: nil, required: false, nullable: false, emit_null: false)]
    getter outer_enum_integer : PetStore::OuterEnumInteger? = nil

    @[JSON::Field(key: "outerEnumDefaultValue", type: PetStore::OuterEnumDefaultValue?, default: PetStore::OuterEnumDefaultValue.new("placed"), required: false, nullable: false, emit_null: false)]
    getter outer_enum_default_value : PetStore::OuterEnumDefaultValue? = PetStore::OuterEnumDefaultValue.new("placed")

    @[JSON::Field(key: "outerEnumIntegerDefaultValue", type: PetStore::OuterEnumIntegerDefaultValue?, default: PetStore::OuterEnumIntegerDefaultValue.new(0), required: false, nullable: false, emit_null: false)]
    getter outer_enum_integer_default_value : PetStore::OuterEnumIntegerDefaultValue? = PetStore::OuterEnumIntegerDefaultValue.new(0)

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @enum_string_required : String? = nil,
      @outer_enum_rquired : PetStore::OuterEnumRquired? = nil,
      @outer_enum_rquired_int64 : PetStore::OuterEnumRquiredInt64? = PetStore::OuterEnumRquiredInt64.new(3),
      # Optional properties
      @enum_string : String? = nil,
      @enum_int32 : Int32? = nil,
      @enum_int64 : Int64? = nil,
      @enum_float : Float32? = nil,
      @enum_double : Float64? = nil,
      @outer_enum : PetStore::OuterEnum? = nil,
      @outer_enum_integer : PetStore::OuterEnumInteger? = nil,
      @outer_enum_default_value : PetStore::OuterEnumDefaultValue? = PetStore::OuterEnumDefaultValue.new("placed"),
      @outer_enum_integer_default_value : PetStore::OuterEnumIntegerDefaultValue? = PetStore::OuterEnumIntegerDefaultValue.new(0)
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"enum_string_required\" is required and cannot be null") if @enum_string_required.nil?

      unless (_enum_string_required = @enum_string_required).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_ENUM_STRING_REQUIRED) unless OpenApi::EnumValidator.valid?(_enum_string_required, VALID_VALUES_FOR_ENUM_STRING_REQUIRED)
      end
      invalid_properties.push("\"outer_enum_rquired\" is required and cannot be null") if @outer_enum_rquired.nil?

      unless (_outer_enum_rquired = @outer_enum_rquired).nil?
        invalid_properties.push(_outer_enum_rquired.error_message) if !_outer_enum_rquired.valid?
      end
      invalid_properties.push("\"outer_enum_rquired_int64\" is required and cannot be null") if @outer_enum_rquired_int64.nil?

      unless (_outer_enum_rquired_int64 = @outer_enum_rquired_int64).nil?
        invalid_properties.push(_outer_enum_rquired_int64.error_message) if !_outer_enum_rquired_int64.valid?
      end
      unless (_enum_string = @enum_string).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_ENUM_STRING) unless OpenApi::EnumValidator.valid?(_enum_string, VALID_VALUES_FOR_ENUM_STRING)
      end
      unless (_enum_int32 = @enum_int32).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_ENUM_INT32) unless OpenApi::EnumValidator.valid?(_enum_int32, VALID_VALUES_FOR_ENUM_INT32)
      end
      unless (_enum_int64 = @enum_int64).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_ENUM_INT64) unless OpenApi::EnumValidator.valid?(_enum_int64, VALID_VALUES_FOR_ENUM_INT64)
      end
      unless (_enum_float = @enum_float).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_ENUM_FLOAT) unless OpenApi::EnumValidator.valid?(_enum_float, VALID_VALUES_FOR_ENUM_FLOAT)
      end
      unless (_enum_double = @enum_double).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_ENUM_DOUBLE) unless OpenApi::EnumValidator.valid?(_enum_double, VALID_VALUES_FOR_ENUM_DOUBLE)
      end
      unless (_outer_enum = @outer_enum).nil?
        invalid_properties.push(_outer_enum.error_message) if !_outer_enum.valid?
      end
      unless (_outer_enum_integer = @outer_enum_integer).nil?
        invalid_properties.push(_outer_enum_integer.error_message) if !_outer_enum_integer.valid?
      end
      unless (_outer_enum_default_value = @outer_enum_default_value).nil?
        invalid_properties.push(_outer_enum_default_value.error_message) if !_outer_enum_default_value.valid?
      end
      unless (_outer_enum_integer_default_value = @outer_enum_integer_default_value).nil?
        invalid_properties.push(_outer_enum_integer_default_value.error_message) if !_outer_enum_integer_default_value.valid?
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @enum_string_required.nil?
      unless (_enum_string_required = @enum_string_required).nil?
        return false unless OpenApi::EnumValidator.valid?(_enum_string_required, VALID_VALUES_FOR_ENUM_STRING_REQUIRED)
      end

      return false if @outer_enum_rquired.nil?
      unless (_outer_enum_rquired = @outer_enum_rquired).nil?
        return false if !_outer_enum_rquired.valid?
      end

      return false if @outer_enum_rquired_int64.nil?
      unless (_outer_enum_rquired_int64 = @outer_enum_rquired_int64).nil?
        return false if !_outer_enum_rquired_int64.valid?
      end

      unless (_enum_string = @enum_string).nil?
        return false unless OpenApi::EnumValidator.valid?(_enum_string, VALID_VALUES_FOR_ENUM_STRING)
      end

      unless (_enum_int32 = @enum_int32).nil?
        return false unless OpenApi::EnumValidator.valid?(_enum_int32, VALID_VALUES_FOR_ENUM_INT32)
      end

      unless (_enum_int64 = @enum_int64).nil?
        return false unless OpenApi::EnumValidator.valid?(_enum_int64, VALID_VALUES_FOR_ENUM_INT64)
      end

      unless (_enum_float = @enum_float).nil?
        return false unless OpenApi::EnumValidator.valid?(_enum_float, VALID_VALUES_FOR_ENUM_FLOAT)
      end

      unless (_enum_double = @enum_double).nil?
        return false unless OpenApi::EnumValidator.valid?(_enum_double, VALID_VALUES_FOR_ENUM_DOUBLE)
      end

      unless (_outer_enum = @outer_enum).nil?
        return false if !_outer_enum.valid?
      end

      unless (_outer_enum_integer = @outer_enum_integer).nil?
        return false if !_outer_enum_integer.valid?
      end

      unless (_outer_enum_default_value = @outer_enum_default_value).nil?
        return false if !_outer_enum_default_value.valid?
      end

      unless (_outer_enum_integer_default_value = @outer_enum_integer_default_value).nil?
        return false if !_outer_enum_integer_default_value.valid?
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enum_string_required Object to be assigned
    def enum_string_required=(new_value : String?)
      raise ArgumentError.new("\"enum_string_required\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        OpenApi::EnumValidator.validate("enum_string_required", new_value, VALID_VALUES_FOR_ENUM_STRING_REQUIRED)
      end

      @enum_string_required = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] outer_enum_rquired Object to be assigned
    def outer_enum_rquired=(new_value : PetStore::OuterEnumRquired?)
      raise ArgumentError.new("\"outer_enum_rquired\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @outer_enum_rquired = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] outer_enum_rquired_int64 Object to be assigned
    def outer_enum_rquired_int64=(new_value : PetStore::OuterEnumRquiredInt64?)
      raise ArgumentError.new("\"outer_enum_rquired_int64\" is required and cannot be null") if new_value.nil?
      unless new_value.nil?
        new_value.validate
      end

      @outer_enum_rquired_int64 = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enum_string Object to be assigned
    def enum_string=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("enum_string", new_value, VALID_VALUES_FOR_ENUM_STRING)
      end

      @enum_string = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enum_int32 Object to be assigned
    def enum_int32=(new_value : Int32?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("enum_int32", new_value, VALID_VALUES_FOR_ENUM_INT32)
      end

      @enum_int32 = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enum_int64 Object to be assigned
    def enum_int64=(new_value : Int64?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("enum_int64", new_value, VALID_VALUES_FOR_ENUM_INT64)
      end

      @enum_int64 = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enum_float Object to be assigned
    def enum_float=(new_value : Float32?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("enum_float", new_value, VALID_VALUES_FOR_ENUM_FLOAT)
      end

      @enum_float = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enum_double Object to be assigned
    def enum_double=(new_value : Float64?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("enum_double", new_value, VALID_VALUES_FOR_ENUM_DOUBLE)
      end

      @enum_double = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] outer_enum Object to be assigned
    def outer_enum=(new_value : PetStore::OuterEnum?)
      unless new_value.nil?
        new_value.validate
      end

      @outer_enum = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] outer_enum_integer Object to be assigned
    def outer_enum_integer=(new_value : PetStore::OuterEnumInteger?)
      unless new_value.nil?
        new_value.validate
      end

      @outer_enum_integer = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] outer_enum_default_value Object to be assigned
    def outer_enum_default_value=(new_value : PetStore::OuterEnumDefaultValue?)
      unless new_value.nil?
        new_value.validate
      end

      @outer_enum_default_value = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] outer_enum_integer_default_value Object to be assigned
    def outer_enum_integer_default_value=(new_value : PetStore::OuterEnumIntegerDefaultValue?)
      unless new_value.nil?
        new_value.validate
      end

      @outer_enum_integer_default_value = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@enum_string_required, @outer_enum_rquired, @outer_enum_rquired_int64, @enum_string, @enum_int32, @enum_int64, @enum_float, @enum_double, @outer_enum, @outer_enum_present, @outer_enum_integer, @outer_enum_default_value, @outer_enum_integer_default_value)
  end
end
