#  OpenAPI Petstore
#
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
#
# The version of the OpenAPI document: 1.0.0
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module PetStore
  @[JSON::Serializable::Options(emit_nulls: true)]
  class EnumTest
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Required properties
    @[JSON::Field(key: "enum_string_required", type: String)]
    getter enum_string_required : String

    ENUM_VALIDATOR_FOR_ENUM_STRING_REQUIRED = EnumValidator.new("enum_string_required", "String", ["UPPER", "lower", ""])

    # Optional properties
    @[JSON::Field(key: "enum_string", type: String?, presence: true, ignore_serialize: enum_string.nil? && !enum_string_present?)]
    getter enum_string : String?

    @[JSON::Field(ignore: true)]
    property? enum_string_present : Bool = false

    ENUM_VALIDATOR_FOR_ENUM_STRING = EnumValidator.new("enum_string", "String", ["UPPER", "lower", ""])

    @[JSON::Field(key: "enum_integer", type: Int32?, presence: true, ignore_serialize: enum_integer.nil? && !enum_integer_present?)]
    getter enum_integer : Int32?

    @[JSON::Field(ignore: true)]
    property? enum_integer_present : Bool = false

    ENUM_VALIDATOR_FOR_ENUM_INTEGER = EnumValidator.new("enum_integer", "Int32", ["1", "-1"])

    @[JSON::Field(key: "enum_number", type: Float64?, presence: true, ignore_serialize: enum_number.nil? && !enum_number_present?)]
    getter enum_number : Float64?

    @[JSON::Field(ignore: true)]
    property? enum_number_present : Bool = false

    ENUM_VALIDATOR_FOR_ENUM_NUMBER = EnumValidator.new("enum_number", "Float64", ["1.1", "-1.2"])

    @[JSON::Field(key: "outerEnum", type: OuterEnum?, presence: true, ignore_serialize: outer_enum.nil? && !outer_enum_present?)]
    property outer_enum : OuterEnum?

    @[JSON::Field(ignore: true)]
    property? outer_enum_present : Bool = false

    @[JSON::Field(key: "outerEnumInteger", type: OuterEnumInteger?, presence: true, ignore_serialize: outer_enum_integer.nil? && !outer_enum_integer_present?)]
    property outer_enum_integer : OuterEnumInteger?

    @[JSON::Field(ignore: true)]
    property? outer_enum_integer_present : Bool = false

    @[JSON::Field(key: "outerEnumDefaultValue", type: OuterEnumDefaultValue?, default: "placed", presence: true, ignore_serialize: outer_enum_default_value.nil? && !outer_enum_default_value_present?)]
    property outer_enum_default_value : OuterEnumDefaultValue?

    @[JSON::Field(ignore: true)]
    property? outer_enum_default_value_present : Bool = false

    @[JSON::Field(key: "outerEnumIntegerDefaultValue", type: OuterEnumIntegerDefaultValue?, default: 0, presence: true, ignore_serialize: outer_enum_integer_default_value.nil? && !outer_enum_integer_default_value_present?)]
    property outer_enum_integer_default_value : OuterEnumIntegerDefaultValue?

    @[JSON::Field(ignore: true)]
    property? outer_enum_integer_default_value_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @enum_string_required : String, @enum_string : String? = nil, @enum_integer : Int32? = nil, @enum_number : Float64? = nil, @outer_enum : OuterEnum? = nil, @outer_enum_integer : OuterEnumInteger? = nil, @outer_enum_default_value : OuterEnumDefaultValue? = "placed", @outer_enum_integer_default_value : OuterEnumIntegerDefaultValue? = 0)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push(ENUM_VALIDATOR_FOR_ENUM_STRING.error_message) unless ENUM_VALIDATOR_FOR_ENUM_STRING.valid?(@enum_string)

      invalid_properties.push(ENUM_VALIDATOR_FOR_ENUM_STRING_REQUIRED.error_message) unless ENUM_VALIDATOR_FOR_ENUM_STRING_REQUIRED.valid?(@enum_string_required, false)

      invalid_properties.push(ENUM_VALIDATOR_FOR_ENUM_INTEGER.error_message) unless ENUM_VALIDATOR_FOR_ENUM_INTEGER.valid?(@enum_integer)

      invalid_properties.push(ENUM_VALIDATOR_FOR_ENUM_NUMBER.error_message) unless ENUM_VALIDATOR_FOR_ENUM_NUMBER.valid?(@enum_number)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_ENUM_STRING.valid?(@enum_string)
      return false unless ENUM_VALIDATOR_FOR_ENUM_STRING_REQUIRED.valid?(@enum_string_required, false)
      return false unless ENUM_VALIDATOR_FOR_ENUM_INTEGER.valid?(@enum_integer)
      return false unless ENUM_VALIDATOR_FOR_ENUM_NUMBER.valid?(@enum_number)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enum_string Object to be assigned
    def enum_string=(enum_string)
      ENUM_VALIDATOR_FOR_ENUM_STRING.valid!(enum_string)
      @enum_string = enum_string
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enum_string_required Object to be assigned
    def enum_string_required=(enum_string_required)
      ENUM_VALIDATOR_FOR_ENUM_STRING_REQUIRED.valid!(enum_string_required, false)
      @enum_string_required = enum_string_required
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enum_integer Object to be assigned
    def enum_integer=(enum_integer)
      ENUM_VALIDATOR_FOR_ENUM_INTEGER.valid!(enum_integer)
      @enum_integer = enum_integer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enum_number Object to be assigned
    def enum_number=(enum_number)
      ENUM_VALIDATOR_FOR_ENUM_NUMBER.valid!(enum_number)
      @enum_number = enum_number
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        enum_string == o.enum_string &&
        enum_string_required == o.enum_string_required &&
        enum_integer == o.enum_integer &&
        enum_number == o.enum_number &&
        outer_enum == o.outer_enum &&
        outer_enum_integer == o.outer_enum_integer &&
        outer_enum_default_value == o.outer_enum_default_value &&
        outer_enum_integer_default_value == o.outer_enum_integer_default_value
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@enum_string, @enum_string_required, @enum_integer, @enum_number, @outer_enum, @outer_enum_integer, @outer_enum_default_value, @outer_enum_integer_default_value)
  end
end
