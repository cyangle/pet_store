#  OpenAPI Petstore
#
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
#
# The version of the OpenAPI document: 1.0.0
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module PetStore
  @[JSON::Serializable::Options(emit_nulls: true)]
  class EnumArrays
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    @[JSON::Field(key: "just_symbol", type: String?, presence: true, ignore_serialize: just_symbol.nil? && !just_symbol_present?)]
    getter just_symbol : String?

    @[JSON::Field(ignore: true)]
    property? just_symbol_present : Bool = false

    ENUM_VALIDATOR_FOR_JUST_SYMBOL = EnumValidator.new("just_symbol", "String", [">=", "$"])

    @[JSON::Field(key: "array_enum", type: Array(String)?, presence: true, ignore_serialize: array_enum.nil? && !array_enum_present?)]
    getter array_enum : Array(String)?

    @[JSON::Field(ignore: true)]
    property? array_enum_present : Bool = false

    ENUM_VALIDATOR_FOR_ARRAY_ENUM = EnumValidator.new("array_enum", "String", ["fish", "crab"])

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @just_symbol : String? = nil, @array_enum : Array(String)? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties.push(ENUM_VALIDATOR_FOR_JUST_SYMBOL.error_message) unless ENUM_VALIDATOR_FOR_JUST_SYMBOL.valid?(@just_symbol)

      invalid_properties.push(ENUM_VALIDATOR_FOR_ARRAY_ENUM.error_message) unless ENUM_VALIDATOR_FOR_ARRAY_ENUM.all_valid?(@array_enum)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_JUST_SYMBOL.valid?(@just_symbol)

      return false unless ENUM_VALIDATOR_FOR_ARRAY_ENUM.all_valid?(@array_enum)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] just_symbol Object to be assigned
    def just_symbol=(just_symbol)
      ENUM_VALIDATOR_FOR_JUST_SYMBOL.valid!(just_symbol)
      @just_symbol = just_symbol
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] array_enum Object to be assigned
    def array_enum=(array_enum)
      ENUM_VALIDATOR_FOR_ARRAY_ENUM.all_valid!(array_enum)
      @array_enum = array_enum
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@just_symbol, @array_enum)
  end
end
