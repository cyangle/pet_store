#  OpenAPI Petstore
#
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
#
# The version of the OpenAPI document: 1.0.0
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module PetStore
  class EnumArrays
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "just_symbol", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter just_symbol : String? = nil
    ERROR_MESSAGE_FOR_JUST_SYMBOL = "invalid value for \"just_symbol\", must be one of [>=, $]."
    VALID_VALUES_FOR_JUST_SYMBOL  = StaticArray[">=", "$"]

    @[JSON::Field(key: "array_enum", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter array_enum : Array(String)? = nil
    ERROR_MESSAGE_FOR_ARRAY_ENUM = "invalid value for \"array_enum\", must be one of [fish, crab]."
    VALID_VALUES_FOR_ARRAY_ENUM  = StaticArray["fish", "crab"]

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @just_symbol : String? = nil,
      @array_enum : Array(String)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      if _just_symbol = @just_symbol
        invalid_properties.push(ERROR_MESSAGE_FOR_JUST_SYMBOL) unless OpenApi::EnumValidator.valid?(_just_symbol, VALID_VALUES_FOR_JUST_SYMBOL)
      end
      if _array_enum = @array_enum
        invalid_properties.push(ERROR_MESSAGE_FOR_ARRAY_ENUM) unless OpenApi::EnumValidator.valid?(_array_enum, VALID_VALUES_FOR_ARRAY_ENUM)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      if _just_symbol = @just_symbol
        return false unless OpenApi::EnumValidator.valid?(_just_symbol, VALID_VALUES_FOR_JUST_SYMBOL)
      end

      if _array_enum = @array_enum
        return false unless OpenApi::EnumValidator.valid?(_array_enum, VALID_VALUES_FOR_ARRAY_ENUM)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] just_symbol Object to be assigned
    def just_symbol=(just_symbol : String?)
      if just_symbol.nil?
        return @just_symbol = nil
      end
      _just_symbol = just_symbol.not_nil!
      OpenApi::EnumValidator.validate("just_symbol", _just_symbol, VALID_VALUES_FOR_JUST_SYMBOL)
      @just_symbol = _just_symbol
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] array_enum Object to be assigned
    def array_enum=(array_enum : Array(String)?)
      if array_enum.nil?
        return @array_enum = nil
      end
      _array_enum = array_enum.not_nil!
      OpenApi::EnumValidator.validate("array_enum", _array_enum, VALID_VALUES_FOR_ARRAY_ENUM)
      @array_enum = _array_enum
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@just_symbol, @array_enum)
  end
end
