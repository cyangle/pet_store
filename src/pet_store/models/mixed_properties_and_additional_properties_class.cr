#  OpenAPI Petstore
#
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
#
# The version of the OpenAPI document: 1.0.0
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module PetStore
  class MixedPropertiesAndAdditionalPropertiesClass
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Json

    # Optional properties

    @[JSON::Field(key: "uuid", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter uuid : String? = nil

    @[JSON::Field(key: "dateTime", type: Time?, default: nil, required: false, nullable: false, emit_null: false, converter: Time::RFC3339Converter)]
    getter date_time : Time? = nil

    @[JSON::Field(key: "map", type: Hash(String, Animal)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter map : Hash(String, Animal)? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @uuid : String? = nil,
      @date_time : Time? = nil,
      @map : Hash(String, Animal)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] uuid Object to be assigned
    def uuid=(uuid : String?)
      if uuid.nil?
        return @uuid = nil
      end
      @uuid = uuid
    end # Custom attribute writer method checking allowed values (enum).
    # @param [Object] date_time Object to be assigned
    def date_time=(date_time : Time?)
      if date_time.nil?
        return @date_time = nil
      end
      @date_time = date_time
    end # Custom attribute writer method checking allowed values (enum).
    # @param [Object] map Object to be assigned
    def map=(map : Hash(String, Animal)?)
      if map.nil?
        return @map = nil
      end
      @map = map
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@uuid, @date_time, @map)
  end
end
