#  OpenAPI Petstore
#
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
#
# The version of the OpenAPI document: 1.0.0
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

require "./file"

module PetStore
  class FileSchemaTestClass
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "file", type: PetStore::File?, default: nil, required: false, nullable: false, emit_null: false)]
    getter file : PetStore::File? = nil

    @[JSON::Field(key: "files", type: Array(PetStore::File)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter files : Array(PetStore::File)? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @file : PetStore::File? = nil,
      @files : Array(PetStore::File)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_file = @file).nil?
        invalid_properties.concat(_file.list_invalid_properties_for("file")) if _file.is_a?(OpenApi::Validatable)
      end
      unless (_files = @files).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "files", container: _files)) if _files.is_a?(Array)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_file = @file).nil?
        return false if _file.is_a?(OpenApi::Validatable) && !_file.valid?
      end

      unless (_files = @files).nil?
        return false if _files.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _files)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] file Object to be assigned
    def file=(new_value : PetStore::File?)
      unless new_value.nil?
        new_value.validate if new_value.is_a?(OpenApi::Validatable)
      end

      @file = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] files Object to be assigned
    def files=(new_value : Array(PetStore::File)?)
      unless new_value.nil?
        OpenApi::ContainerValidator.validate(container: new_value) if new_value.is_a?(Array)
      end

      @files = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@file, @files)
  end
end
