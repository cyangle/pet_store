#  OpenAPI Petstore
#
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
#
# The version of the OpenAPI document: 1.0.0
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module PetStore
  @[JSON::Serializable::Options(emit_nulls: true)]
  class User
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties

    @[JSON::Field(key: "id", type: Int64?, presence: true, ignore_serialize: id.nil? && !id_present?)]
    property id : Int64?

    @[JSON::Field(ignore: true)]
    property? id_present : Bool = false

    @[JSON::Field(key: "username", type: String?, presence: true, ignore_serialize: username.nil? && !username_present?)]
    property username : String?

    @[JSON::Field(ignore: true)]
    property? username_present : Bool = false

    @[JSON::Field(key: "firstName", type: String?, presence: true, ignore_serialize: first_name.nil? && !first_name_present?)]
    property first_name : String?

    @[JSON::Field(ignore: true)]
    property? first_name_present : Bool = false

    @[JSON::Field(key: "lastName", type: String?, presence: true, ignore_serialize: last_name.nil? && !last_name_present?)]
    property last_name : String?

    @[JSON::Field(ignore: true)]
    property? last_name_present : Bool = false

    @[JSON::Field(key: "email", type: String?, presence: true, ignore_serialize: email.nil? && !email_present?)]
    property email : String?

    @[JSON::Field(ignore: true)]
    property? email_present : Bool = false

    @[JSON::Field(key: "password", type: String?, presence: true, ignore_serialize: password.nil? && !password_present?)]
    property password : String?

    @[JSON::Field(ignore: true)]
    property? password_present : Bool = false

    @[JSON::Field(key: "phone", type: String?, presence: true, ignore_serialize: phone.nil? && !phone_present?)]
    property phone : String?

    @[JSON::Field(ignore: true)]
    property? phone_present : Bool = false

    # User Status
    @[JSON::Field(key: "userStatus", type: Int32?, presence: true, ignore_serialize: user_status.nil? && !user_status_present?)]
    property user_status : Int32?

    @[JSON::Field(ignore: true)]
    property? user_status_present : Bool = false

    # test code generation for objects Value must be a map of strings to values. It cannot be the 'null' value.
    @[JSON::Field(key: "arbitraryObject", type: Hash(String, String)?, presence: true, ignore_serialize: arbitrary_object.nil? && !arbitrary_object_present?)]
    property arbitrary_object : Hash(String, String)?

    @[JSON::Field(ignore: true)]
    property? arbitrary_object_present : Bool = false

    # test code generation for nullable objects. Value must be a map of strings to values or the 'null' value.
    @[JSON::Field(key: "arbitraryNullableObject", type: Hash(String, String)?, presence: true, ignore_serialize: arbitrary_nullable_object.nil? && !arbitrary_nullable_object_present?)]
    property arbitrary_nullable_object : Hash(String, String)?

    @[JSON::Field(ignore: true)]
    property? arbitrary_nullable_object_present : Bool = false

    # test code generation for any type Value can be any type - string, number, boolean, array or object.
    @[JSON::Field(key: "arbitraryTypeValue", type: JSON::Any, presence: true, ignore_serialize: arbitrary_type_value.nil? && !arbitrary_type_value_present?)]
    property arbitrary_type_value : JSON::Any

    @[JSON::Field(ignore: true)]
    property? arbitrary_type_value_present : Bool = false

    # test code generation for any type Value can be any type - string, number, boolean, array, object or the 'null' value.
    @[JSON::Field(key: "arbitraryNullableTypeValue", type: JSON::Any, presence: true, ignore_serialize: arbitrary_nullable_type_value.nil? && !arbitrary_nullable_type_value_present?)]
    property arbitrary_nullable_type_value : JSON::Any

    @[JSON::Field(ignore: true)]
    property? arbitrary_nullable_type_value_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @id : Int64? = nil,
      @username : String? = nil,
      @first_name : String? = nil,
      @last_name : String? = nil,
      @email : String? = nil,
      @password : String? = nil,
      @phone : String? = nil,
      @user_status : Int32? = nil,
      @arbitrary_object : Hash(String, String)? = nil,
      @arbitrary_nullable_object : Hash(String, String)? = nil,
      @arbitrary_type_value : JSON::Any = nil,
      @arbitrary_nullable_type_value : JSON::Any = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@id, @id_present, @username, @username_present, @first_name, @first_name_present, @last_name, @last_name_present, @email, @email_present, @password, @password_present, @phone, @phone_present, @user_status, @user_status_present, @arbitrary_object, @arbitrary_object_present, @arbitrary_nullable_object, @arbitrary_nullable_object_present, @arbitrary_type_value, @arbitrary_type_value_present, @arbitrary_nullable_type_value, @arbitrary_nullable_type_value_present)
  end
end
