#  OpenAPI Petstore
#
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
#
# The version of the OpenAPI document: 1.0.0
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module PetStore
  class Pet
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Required Properties

    @[JSON::Field(key: "name", type: String?, default: nil, required: true, nullable: false, emit_null: false)]
    getter name : String? = nil

    @[JSON::Field(key: "photoUrls", type: Array(String)?, default: nil, required: true, nullable: false, emit_null: false)]
    getter photo_urls : Array(String)? = nil

    # End of Required Properties

    # Optional Properties

    @[JSON::Field(key: "uuid", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter uuid : String? = nil

    @[JSON::Field(key: "id", type: Int64?, default: nil, required: false, nullable: false, emit_null: false)]
    getter id : Int64? = nil

    @[JSON::Field(key: "category", type: PetStore::Category?, default: nil, required: false, nullable: false, emit_null: false)]
    getter category : PetStore::Category? = nil

    @[JSON::Field(key: "tags", type: Array(PetStore::Tag)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter tags : Array(PetStore::Tag)? = nil

    # pet status in the store
    @[JSON::Field(key: "status", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter status : String? = nil
    ERROR_MESSAGE_FOR_STATUS = "invalid value for \"status\", must be one of [available, pending, sold]."
    VALID_VALUES_FOR_STATUS  = String.static_array("available", "pending", "sold")

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Required properties
      @name : String? = nil,
      @photo_urls : Array(String)? = nil,
      # Optional properties
      @uuid : String? = nil,
      @id : Int64? = nil,
      @category : PetStore::Category? = nil,
      @tags : Array(PetStore::Tag)? = nil,
      @status : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties.push("\"name\" is required and cannot be null") if @name.nil?

      invalid_properties.push("\"photo_urls\" is required and cannot be null") if @photo_urls.nil?

      unless (_category = @category).nil?
        invalid_properties.concat(_category.list_invalid_properties_for("category")) if _category.is_a?(OpenApi::Validatable)
      end
      unless (_tags = @tags).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "tags", container: _tags)) if _tags.is_a?(Array)
      end
      unless (_status = @status).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_STATUS) unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      return false if @name.nil?

      return false if @photo_urls.nil?

      unless (_category = @category).nil?
        return false if _category.is_a?(OpenApi::Validatable) && !_category.valid?
      end

      unless (_tags = @tags).nil?
        return false if _tags.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _tags)
      end

      unless (_status = @status).nil?
        return false unless OpenApi::EnumValidator.valid?(_status, VALID_VALUES_FOR_STATUS)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] name Object to be assigned
    def name=(name : String?)
      if name.nil?
        raise ArgumentError.new("\"name\" is required and cannot be null")
      end
      _name = name.not_nil!
      @name = _name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] photo_urls Object to be assigned
    def photo_urls=(photo_urls : Array(String)?)
      if photo_urls.nil?
        raise ArgumentError.new("\"photo_urls\" is required and cannot be null")
      end
      _photo_urls = photo_urls.not_nil!
      @photo_urls = _photo_urls
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] uuid Object to be assigned
    def uuid=(uuid : String?)
      if uuid.nil?
        return @uuid = nil
      end
      _uuid = uuid.not_nil!
      @uuid = _uuid
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] id Object to be assigned
    def id=(id : Int64?)
      if id.nil?
        return @id = nil
      end
      _id = id.not_nil!
      @id = _id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] category Object to be assigned
    def category=(category : PetStore::Category?)
      if category.nil?
        return @category = nil
      end
      _category = category.not_nil!
      _category.validate if _category.is_a?(OpenApi::Validatable)
      @category = _category
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tags Object to be assigned
    def tags=(tags : Array(PetStore::Tag)?)
      if tags.nil?
        return @tags = nil
      end
      _tags = tags.not_nil!
      OpenApi::ContainerValidator.validate(container: _tags) if _tags.is_a?(Array)
      @tags = _tags
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status : String?)
      if status.nil?
        return @status = nil
      end
      _status = status.not_nil!
      OpenApi::EnumValidator.validate("status", _status, VALID_VALUES_FOR_STATUS)
      @status = _status
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@name, @photo_urls, @uuid, @id, @category, @tags, @status)
  end
end
