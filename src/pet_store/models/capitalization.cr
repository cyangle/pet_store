#  OpenAPI Petstore
#
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
#
# The version of the OpenAPI document: 1.0.0
#
# Generated by: https://openapi-generator.tech
#

require "../../core"

module PetStore
  class Capitalization
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "smallCamel", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter small_camel : String? = nil

    @[JSON::Field(key: "CapitalCamel", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter capital_camel : String? = nil

    @[JSON::Field(key: "small_Snake", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter small_snake : String? = nil

    @[JSON::Field(key: "Capital_Snake", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter capital_snake : String? = nil

    @[JSON::Field(key: "SCA_ETH_Flow_Points", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter sca_eth_flow_points : String? = nil

    # Name of the pet
    @[JSON::Field(key: "ATT_NAME", type: String?, default: nil, required: false, nullable: false, emit_null: false)]
    getter att_name : String? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @small_camel : String? = nil,
      @capital_camel : String? = nil,
      @small_snake : String? = nil,
      @capital_snake : String? = nil,
      @sca_eth_flow_points : String? = nil,
      @att_name : String? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] small_camel Object to be assigned
    def small_camel=(new_value : String?)
      @small_camel = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] capital_camel Object to be assigned
    def capital_camel=(new_value : String?)
      @capital_camel = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] small_snake Object to be assigned
    def small_snake=(new_value : String?)
      @small_snake = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] capital_snake Object to be assigned
    def capital_snake=(new_value : String?)
      @capital_snake = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sca_eth_flow_points Object to be assigned
    def sca_eth_flow_points=(new_value : String?)
      @sca_eth_flow_points = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] att_name Object to be assigned
    def att_name=(new_value : String?)
      @att_name = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@small_camel, @capital_camel, @small_snake, @capital_snake, @sca_eth_flow_points, @att_name)
  end
end
