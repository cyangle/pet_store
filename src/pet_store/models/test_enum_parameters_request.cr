#  OpenAPI Petstore
#
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
#
# The version of the OpenAPI document: 1.0.0
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module PetStore
  class TestEnumParametersRequest
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    # Form parameter enum test (string array)
    @[JSON::Field(key: "enum_form_string_array", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter enum_form_string_array : Array(String)? = nil
    ERROR_MESSAGE_FOR_ENUM_FORM_STRING_ARRAY = "invalid value for \"enum_form_string_array\", must be one of [>, $]."
    VALID_VALUES_FOR_ENUM_FORM_STRING_ARRAY  = String.static_array(">", "$")

    # Form parameter enum test (string)
    @[JSON::Field(key: "enum_form_string", type: String?, default: "-efg", required: false, nullable: false, emit_null: false)]
    getter enum_form_string : String? = "-efg"
    ERROR_MESSAGE_FOR_ENUM_FORM_STRING = "invalid value for \"enum_form_string\", must be one of [_abc, -efg, (xyz)]."
    VALID_VALUES_FOR_ENUM_FORM_STRING  = String.static_array("_abc", "-efg", "(xyz)")

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @enum_form_string_array : Array(String)? = nil,
      @enum_form_string : String? = "-efg"
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_enum_form_string_array = @enum_form_string_array).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_ENUM_FORM_STRING_ARRAY) unless OpenApi::EnumValidator.valid?(_enum_form_string_array, VALID_VALUES_FOR_ENUM_FORM_STRING_ARRAY)
      end
      unless (_enum_form_string = @enum_form_string).nil?
        invalid_properties.push(ERROR_MESSAGE_FOR_ENUM_FORM_STRING) unless OpenApi::EnumValidator.valid?(_enum_form_string, VALID_VALUES_FOR_ENUM_FORM_STRING)
      end
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_enum_form_string_array = @enum_form_string_array).nil?
        return false unless OpenApi::EnumValidator.valid?(_enum_form_string_array, VALID_VALUES_FOR_ENUM_FORM_STRING_ARRAY)
      end

      unless (_enum_form_string = @enum_form_string).nil?
        return false unless OpenApi::EnumValidator.valid?(_enum_form_string, VALID_VALUES_FOR_ENUM_FORM_STRING)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enum_form_string_array Object to be assigned
    def enum_form_string_array=(new_value : Array(String)?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("enum_form_string_array", new_value, VALID_VALUES_FOR_ENUM_FORM_STRING_ARRAY)
      end

      @enum_form_string_array = new_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] enum_form_string Object to be assigned
    def enum_form_string=(new_value : String?)
      unless new_value.nil?
        OpenApi::EnumValidator.validate("enum_form_string", new_value, VALID_VALUES_FOR_ENUM_FORM_STRING)
      end

      @enum_form_string = new_value
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@enum_form_string_array, @enum_form_string)
  end
end
