#  OpenAPI Petstore
#
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
#
# The version of the OpenAPI document: 1.0.0
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module PetStore
  @[JSON::Serializable::Options(emit_nulls: true)]
  class GmFruit
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties
    @[JSON::Field(key: "color", type: String?, presence: true, ignore_serialize: color.nil? && !color_present?)]
    property color : String?

    @[JSON::Field(ignore: true)]
    property? color_present : Bool = false

    @[JSON::Field(key: "cultivar", type: String?, presence: true, ignore_serialize: cultivar.nil? && !cultivar_present?)]
    property cultivar : String?

    @[JSON::Field(ignore: true)]
    property? cultivar_present : Bool = false

    @[JSON::Field(key: "lengthCm", type: Float64?, presence: true, ignore_serialize: length_cm.nil? && !length_cm_present?)]
    property length_cm : Float64?

    @[JSON::Field(ignore: true)]
    property? length_cm_present : Bool = false

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
        Apple,
        Banana,
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(*, @color : String? = nil, @cultivar : String? = nil, @length_cm : Float64? = nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      _any_of_found = false
      self.class.openapi_any_of.each do |_class|
        _any_of = PetStore.const_get(_class).build_from_hash(self.to_hash)
        if _any_of.valid?
          _any_of_found = true
        end
      end

      if !_any_of_found
        return false
      end

      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
        color == o.color &&
        cultivar == o.cultivar &&
        length_cm == o.length_cm
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [UInt64] Hash code
    def_hash(@color, @cultivar, @length_cm)
  end
end
