#  OpenAPI Petstore
#
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
#
# The version of the OpenAPI document: 1.0.0
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module PetStore
  class ParamEncodingTest2RequestBody
    include JSON::Serializable
    include JSON::Serializable::Unmapped
    include OpenApi::Validatable
    include OpenApi::Json

    # Optional Properties

    @[JSON::Field(key: "any_value", type: JSON::Any?, default: nil, required: false, nullable: true, emit_null: true, presence: true, ignore_serialize: any_value.nil? && !any_value_present?)]
    getter any_value : JSON::Any? = nil

    @[JSON::Field(ignore: true)]
    property? any_value_present : Bool = false

    @[JSON::Field(key: "any_object", type: JSON::Any?, default: nil, required: false, nullable: false, emit_null: false)]
    getter any_object : JSON::Any? = nil

    @[JSON::Field(key: "array_in_body", type: Array(String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter array_in_body : Array(String)? = nil

    @[JSON::Field(key: "map_in_body", type: Hash(String, String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter map_in_body : Hash(String, String)? = nil

    @[JSON::Field(key: "dog", type: PetStore::Dog?, default: nil, required: false, nullable: false, emit_null: false)]
    getter dog : PetStore::Dog? = nil

    @[JSON::Field(key: "array_of_apples", type: Array(PetStore::Apple)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter array_of_apples : Array(PetStore::Apple)? = nil

    @[JSON::Field(key: "map_of_pet", type: Hash(String, PetStore::Pet)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter map_of_pet : Hash(String, PetStore::Pet)? = nil

    @[JSON::Field(key: "inline_map", type: Hash(String, String)?, default: nil, required: false, nullable: false, emit_null: false)]
    getter inline_map : Hash(String, String)? = nil

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @any_value : JSON::Any? = nil,
      @any_object : JSON::Any? = nil,
      @array_in_body : Array(String)? = nil,
      @map_in_body : Hash(String, String)? = nil,
      @dog : PetStore::Dog? = nil,
      @array_of_apples : Array(PetStore::Apple)? = nil,
      @map_of_pet : Hash(String, PetStore::Pet)? = nil,
      @inline_map : Hash(String, String)? = nil
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties : Array(String)
      invalid_properties = Array(String).new

      unless (_dog = @dog).nil?
        invalid_properties.concat(_dog.list_invalid_properties_for("dog")) if _dog.is_a?(OpenApi::Validatable)
      end
      unless (_array_of_apples = @array_of_apples).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "array_of_apples", container: _array_of_apples)) if _array_of_apples.is_a?(Array)
      end
      unless (_map_of_pet = @map_of_pet).nil?
        invalid_properties.concat(OpenApi::ContainerValidator.list_invalid_properties_for(key: "map_of_pet", container: _map_of_pet)) if _map_of_pet.is_a?(Hash)
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid? : Bool
      unless (_dog = @dog).nil?
        return false if _dog.is_a?(OpenApi::Validatable) && !_dog.valid?
      end

      unless (_array_of_apples = @array_of_apples).nil?
        return false if _array_of_apples.is_a?(Array) && !OpenApi::ContainerValidator.valid?(container: _array_of_apples)
      end

      unless (_map_of_pet = @map_of_pet).nil?
        return false if _map_of_pet.is_a?(Hash) && !OpenApi::ContainerValidator.valid?(container: _map_of_pet)
      end

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] any_value Object to be assigned
    def any_value=(any_value : JSON::Any?)
      if any_value.nil?
        return @any_value = nil
      end
      _any_value = any_value.not_nil!
      @any_value = _any_value
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] any_object Object to be assigned
    def any_object=(any_object : JSON::Any?)
      if any_object.nil?
        return @any_object = nil
      end
      _any_object = any_object.not_nil!
      @any_object = _any_object
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] array_in_body Object to be assigned
    def array_in_body=(array_in_body : Array(String)?)
      if array_in_body.nil?
        return @array_in_body = nil
      end
      _array_in_body = array_in_body.not_nil!
      @array_in_body = _array_in_body
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] map_in_body Object to be assigned
    def map_in_body=(map_in_body : Hash(String, String)?)
      if map_in_body.nil?
        return @map_in_body = nil
      end
      _map_in_body = map_in_body.not_nil!
      @map_in_body = _map_in_body
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] dog Object to be assigned
    def dog=(dog : PetStore::Dog?)
      if dog.nil?
        return @dog = nil
      end
      _dog = dog.not_nil!
      _dog.validate if _dog.is_a?(OpenApi::Validatable)
      @dog = _dog
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] array_of_apples Object to be assigned
    def array_of_apples=(array_of_apples : Array(PetStore::Apple)?)
      if array_of_apples.nil?
        return @array_of_apples = nil
      end
      _array_of_apples = array_of_apples.not_nil!
      OpenApi::ContainerValidator.validate(container: _array_of_apples) if _array_of_apples.is_a?(Array)
      @array_of_apples = _array_of_apples
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] map_of_pet Object to be assigned
    def map_of_pet=(map_of_pet : Hash(String, PetStore::Pet)?)
      if map_of_pet.nil?
        return @map_of_pet = nil
      end
      _map_of_pet = map_of_pet.not_nil!
      OpenApi::ContainerValidator.validate(container: _map_of_pet) if _map_of_pet.is_a?(Hash)
      @map_of_pet = _map_of_pet
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] inline_map Object to be assigned
    def inline_map=(inline_map : Hash(String, String)?)
      if inline_map.nil?
        return @inline_map = nil
      end
      _inline_map = inline_map.not_nil!
      @inline_map = _inline_map
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@any_value, @any_value_present, @any_object, @array_in_body, @map_in_body, @dog, @array_of_apples, @map_of_pet, @inline_map)
  end
end
