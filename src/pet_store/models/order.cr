#  OpenAPI Petstore
#
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
#
# The version of the OpenAPI document: 1.0.0
#
# Generated by: https://openapi-generator.tech
#

require "json"
require "time"
require "log"

module PetStore
  @[JSON::Serializable::Options(emit_nulls: true)]
  class Order
    include JSON::Serializable
    include JSON::Serializable::Unmapped

    # Optional properties

    @[JSON::Field(key: "id", type: Int64?, presence: true, ignore_serialize: id.nil? && !id_present?)]
    property id : Int64?

    @[JSON::Field(ignore: true)]
    property? id_present : Bool = false

    @[JSON::Field(key: "petId", type: Int64?, presence: true, ignore_serialize: pet_id.nil? && !pet_id_present?)]
    property pet_id : Int64?

    @[JSON::Field(ignore: true)]
    property? pet_id_present : Bool = false

    @[JSON::Field(key: "quantity", type: Int32?, presence: true, ignore_serialize: quantity.nil? && !quantity_present?)]
    property quantity : Int32?

    @[JSON::Field(ignore: true)]
    property? quantity_present : Bool = false

    @[JSON::Field(key: "shipDate", type: Time?, converter: Time::RFC3339Converter, presence: true, ignore_serialize: ship_date.nil? && !ship_date_present?)]
    property ship_date : Time?

    @[JSON::Field(ignore: true)]
    property? ship_date_present : Bool = false

    # Order Status
    @[JSON::Field(key: "status", type: String?, presence: true, ignore_serialize: status.nil? && !status_present?)]
    getter status : String?

    @[JSON::Field(ignore: true)]
    property? status_present : Bool = false

    ENUM_VALIDATOR_FOR_STATUS = EnumValidator.new("status", "String", ["placed", "approved", "delivered"])

    @[JSON::Field(key: "complete", type: Bool?, default: false, presence: true, ignore_serialize: complete.nil? && !complete_present?)]
    property complete : Bool? = false

    @[JSON::Field(ignore: true)]
    property? complete_present : Bool = false

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(
      *,
      # Optional properties
      @id : Int64? = nil,
      @pet_id : Int64? = nil,
      @quantity : Int32? = nil,
      @ship_date : Time? = nil,
      @status : String? = nil,
      @complete : Bool? = false
    )
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new

      invalid_properties.push(ENUM_VALIDATOR_FOR_STATUS.error_message) unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status)

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false unless ENUM_VALIDATOR_FOR_STATUS.valid?(@status)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status : String?)
      ENUM_VALIDATOR_FOR_STATUS.valid!(status)
      @status = status
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Generates #hash and #== methods from all fields
    # #== @return [Bool]
    # #hash calculates hash code according to all attributes.
    # #hash @return [UInt64] Hash code
    def_equals_and_hash(@id, @pet_id, @quantity, @ship_date, @status, @complete)
  end
end
