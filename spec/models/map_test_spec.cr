#  OpenAPI Petstore
#
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
#
# The version of the OpenAPI document: 1.0.0
#
# Generated by: https://openapi-generator.tech
#

require "../spec_helper"

# Unit tests for PetStore::MapTest
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe PetStore::MapTest do
  describe "test an instance of MapTest" do
    it "should create an instance of MapTest" do
      instance = PetStore::MapTest.new
      (instance).should be_a(PetStore::MapTest)
    end
  end

  describe "test attribute 'map_map_of_string'" do
    it "deserializes map_map_of_string" do
      json = %({"map_map_of_string":{"a":{"b":"c"},"d":{"e":"f"}}})
      instance = PetStore::MapTest.from_json(json)
      expect_value = {
        "a" => {"b" => "c"},
        "d" => {"e" => "f"},
      }
      instance.map_map_of_string.not_nil!.should eq(expect_value)
    end
  end

  describe "test attribute 'map_of_enum_string'" do
    it "validates" do
      instance = PetStore::MapTest.new
      instance.valid?.should be_true
      instance.list_invalid_properties.empty?.should be_true
      invalid_hash = {"test" => "fail"}
      invalid_instance = PetStore::MapTest.new(map_of_enum_string: invalid_hash)
      invalid_instance.valid?.should be_false
      invalid_instance.list_invalid_properties.empty?.should be_false
      allowable_values = PetStore::MapTest::VALID_VALUES_FOR_MAP_OF_ENUM_STRING
      allowable_values.each do |value|
        instance.map_of_enum_string = {"test" => value}
      end
      expect_raises(ArgumentError, /must be one of/) do
        instance.map_of_enum_string = invalid_hash
      end
    end

    it "validates partial invalid values" do
      instance = PetStore::MapTest.new
      instance.valid?.should be_true
      valid_hash = {"a" => PetStore::MapTest::VALID_VALUES_FOR_MAP_OF_ENUM_STRING.first}
      invalid_hash = {"a" => "UPPER", "test" => "fail"}
      instance.map_of_enum_string = valid_hash
      expect_raises(ArgumentError, /must be one of/) do
        instance.map_of_enum_string = invalid_hash
      end
      expect_raises(ArgumentError, /must be one of/) do
        instance.map_of_enum_string = invalid_hash.merge(valid_hash)
      end
    end
  end

  describe "test attribute 'direct_map'" do
    it "deserializes map_map_of_string" do
      json = %({"direct_map":{"a":true,"b":false}})
      instance = PetStore::MapTest.from_json(json)
      expect_value = {
        "a" => true,
        "b" => false,
      }
      instance.direct_map.not_nil!.should eq(expect_value)
    end
  end

  describe "test attribute 'indirect_map'" do
    it "deserializes map_map_of_string" do
      json = %({"indirect_map":{"a":true,"b":false}})
      instance = PetStore::MapTest.from_json(json)
      expect_value = {
        "a" => true,
        "b" => false,
      }
      instance.indirect_map.not_nil!.should eq(expect_value)
    end
  end
end
