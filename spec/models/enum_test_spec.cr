#  OpenAPI Petstore
#
# This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
#
# The version of the OpenAPI document: 1.0.0
#
# Generated by: https://openapi-generator.tech
#

require "../spec_helper"

# Unit tests for PetStore::EnumTest
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe PetStore::EnumTest do
  describe "test an instance of EnumTest" do
    it "should create an instance of EnumTest" do
      json = %({"enum_string_required":"lower","outerEnumRquired":"in_progress"})
      instance = PetStore::EnumTest.from_json(json)
      (instance).should be_a(PetStore::EnumTest)
      (instance.list_invalid_properties).should be_empty
      (instance.outer_enum_rquired.data).should eq("in_progress")
      (instance.valid?).should be_true
      (instance.outer_enum).should be_nil
      (instance.to_json).should eq(json)
    end
  end

  describe "test attribute 'enum_string'" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
      # validator = EnumValidator.new("String", ["UPPER", "lower", ""])
      # validator.allowable_values.each do |value|
      #   expect { instance.enum_string = value }.not_to raise_error
      # end
    end
  end

  describe "test attribute 'enum_string_required'" do
    it "should work" do
      json = %({"enum_string_required":"lower","outerEnumRquired":"in_progress"})
      instance = PetStore::EnumTest.from_json(json)
      (instance.to_json).should eq(json)
      validator = PetStore::EnumTest::ENUM_VALIDATOR_FOR_ENUM_STRING_REQUIRED
      validator.allowable_values.each do |value|
        instance.enum_string_required = value.as(String)
      end
    end
  end

  describe "test attribute 'enum_integer'" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
      # validator = EnumValidator.new("Int32", ["1", "-1"])
      # validator.allowable_values.each do |value|
      #   expect { instance.enum_integer = value }.not_to raise_error
      # end
    end
  end

  describe "test attribute 'enum_number'" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
      # validator = EnumValidator.new("Float64", ["1.1", "-1.2"])
      # validator.allowable_values.each do |value|
      #   expect { instance.enum_number = value }.not_to raise_error
      # end
    end
  end

  describe "test attribute 'outer_enum'" do
    it "should work" do
      json = %({"enum_string_required":"lower","outerEnumRquired":"in_progress","outerEnum":"invalid"})
      instance = PetStore::EnumTest.from_json(json)
      instance.list_invalid_properties.should_not be_empty
      (instance.to_json).should eq(json)
    end
  end

  describe "test attribute 'outer_enum_integer'" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  describe "test attribute 'outer_enum_default_value'" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  describe "test attribute 'outer_enum_integer_default_value'" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end
end
